                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _Message2
                                     12 	.globl _Message1
                                     13 	.globl _OLED_FONT
                                     14 	.globl _OLED_INIT_CMD
                                     15 	.globl _main
                                     16 	.globl _Read_EEPROM
                                     17 	.globl _Write_EEPROM
                                     18 	.globl _I2C_write
                                     19 	.globl _I2C_address
                                     20 	.globl _I2C_stop
                                     21 	.globl _I2C_start
                                     22 	.globl _I2C_init
                                     23 	.globl _Timer4DelayMs
                                     24 	.globl _Timer4Config
                                     25 	.globl _Flag
                                     26 	.globl _Data
                                     27 	.globl _OLED_init
                                     28 	.globl _OLED_printP
                                     29 	.globl _OLED_printNum
                                     30 	.globl _OLED_printFloat
                                     31 	.globl _OLED_printOneNumber
                                     32 	.globl _OLED_cursor
                                     33 	.globl _OLED_clear
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area DATA
      000000                         38 _Data::
      000000                         39 	.ds 1
      000001                         40 _Flag::
      000001                         41 	.ds 1
                                     42 ;--------------------------------------------------------
                                     43 ; ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area INITIALIZED
                                     46 ;--------------------------------------------------------
                                     47 ; Stack segment in internal ram
                                     48 ;--------------------------------------------------------
                                     49 	.area SSEG
      000000                         50 __start__stack:
      000000                         51 	.ds	1
                                     52 
                                     53 ;--------------------------------------------------------
                                     54 ; absolute external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area DABS (ABS)
                                     57 
                                     58 ; default segment ordering for linker
                                     59 	.area HOME
                                     60 	.area GSINIT
                                     61 	.area GSFINAL
                                     62 	.area CONST
                                     63 	.area INITIALIZER
                                     64 	.area CODE
                                     65 
                                     66 ;--------------------------------------------------------
                                     67 ; interrupt vector
                                     68 ;--------------------------------------------------------
                                     69 	.area HOME
      000000                         70 __interrupt_vect:
      000000 82v00u00u00             71 	int s_GSINIT ; reset
                                     72 ;--------------------------------------------------------
                                     73 ; global & static initialisations
                                     74 ;--------------------------------------------------------
                                     75 	.area HOME
                                     76 	.area GSINIT
                                     77 	.area GSFINAL
                                     78 	.area GSINIT
      000000 CDr00r00         [ 4]   79 	call	___sdcc_external_startup
      000003 4D               [ 1]   80 	tnz	a
      000004 27 03            [ 1]   81 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   82 	jp	__sdcc_program_startup
      000009                         83 __sdcc_init_data:
                                     84 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   85 	ldw x, #l_DATA
      00000C 27 07            [ 1]   86 	jreq	00002$
      00000E                         87 00001$:
      00000E 72 4FuFFuFF      [ 1]   88 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   89 	decw x
      000013 26 F9            [ 1]   90 	jrne	00001$
      000015                         91 00002$:
      000015 AEr00r00         [ 2]   92 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   93 	jreq	00004$
      00001A                         94 00003$:
      00001A D6uFFuFF         [ 1]   95 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   96 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   97 	decw	x
      000021 26 F7            [ 1]   98 	jrne	00003$
      000023                         99 00004$:
                                    100 ; stm8_genXINIT() end
                                    101 	.area GSFINAL
      000000 CCr00r04         [ 2]  102 	jp	__sdcc_program_startup
                                    103 ;--------------------------------------------------------
                                    104 ; Home
                                    105 ;--------------------------------------------------------
                                    106 	.area HOME
                                    107 	.area HOME
      000004                        108 __sdcc_program_startup:
      000004 CCr00r2A         [ 2]  109 	jp	_main
                                    110 ;	return from main will return to caller
                                    111 ;--------------------------------------------------------
                                    112 ; code
                                    113 ;--------------------------------------------------------
                                    114 	.area CODE
                                    115 ;	main.c: 151: void Write_EEPROM(uint8_t Data){
                                    116 ;	-----------------------------------------
                                    117 ;	 function Write_EEPROM
                                    118 ;	-----------------------------------------
      000000                        119 _Write_EEPROM:
      000000 88               [ 1]  120 	push	a
      000001 6B 01            [ 1]  121 	ld	(0x01, sp), a
                                    122 ;	main.c: 153: if( (FLASH->IAPSR &= (uint8_t)FLASH_IAPSR_DUL)== RESET){
      000003 C6 50 5F         [ 1]  123 	ld	a, 0x505f
      000006 A4 08            [ 1]  124 	and	a, #0x08
      000008 C7 50 5F         [ 1]  125 	ld	0x505f, a
      00000B 4D               [ 1]  126 	tnz	a
      00000C 26 08            [ 1]  127 	jrne	00102$
                                    128 ;	main.c: 154: FLASH->DUKR = 0xAE; /* Warning: keys are reversed on data memory !!! */
      00000E 35 AE 50 64      [ 1]  129 	mov	0x5064+0, #0xae
                                    130 ;	main.c: 155: FLASH->DUKR = 0x56;
      000012 35 56 50 64      [ 1]  131 	mov	0x5064+0, #0x56
      000016                        132 00102$:
                                    133 ;	main.c: 159: *(PointerAttr uint8_t*) (MemoryAddressCast)0X4000 = Data;
      000016 AE 40 00         [ 2]  134 	ldw	x, #0x4000
      000019 7B 01            [ 1]  135 	ld	a, (0x01, sp)
      00001B F7               [ 1]  136 	ld	(x), a
                                    137 ;	main.c: 162: FLASH->IAPSR &= (uint8_t)0xF7;
      00001C 72 17 50 5F      [ 1]  138 	bres	0x505f, #3
                                    139 ;	main.c: 163: }
      000020 84               [ 1]  140 	pop	a
      000021 81               [ 4]  141 	ret
                                    142 ;	main.c: 164: uint8_t Read_EEPROM(uint32_t Address){
                                    143 ;	-----------------------------------------
                                    144 ;	 function Read_EEPROM
                                    145 ;	-----------------------------------------
      000022                        146 _Read_EEPROM:
                                    147 ;	main.c: 171: Data = (*(PointerAttr uint8_t *) (MemoryAddressCast)Address);
      000022 1E 05            [ 2]  148 	ldw	x, (0x05, sp)
      000024 F6               [ 1]  149 	ld	a, (x)
                                    150 ;	main.c: 174: return Data;
                                    151 ;	main.c: 175: }
      000025 1E 01            [ 2]  152 	ldw	x, (1, sp)
      000027 5B 06            [ 2]  153 	addw	sp, #6
      000029 FC               [ 2]  154 	jp	(x)
                                    155 ;	main.c: 178: void main (void)
                                    156 ;	-----------------------------------------
                                    157 ;	 function main
                                    158 ;	-----------------------------------------
      00002A                        159 _main:
                                    160 ;	main.c: 181: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      00002A C6 50 C6         [ 1]  161 	ld	a, 0x50c6
      00002D A4 E7            [ 1]  162 	and	a, #0xe7
      00002F C7 50 C6         [ 1]  163 	ld	0x50c6, a
                                    164 ;	main.c: 182: CLK->CKDIVR |= (uint8_t)0x00;
      000032 55 50 C6 50 C6   [ 1]  165 	mov	0x50c6, 0x50c6
                                    166 ;	main.c: 184: GPIOB->ODR = GPIO_ODR_RESET_VALUE; /* Reset Output Data Register */
      000037 35 00 50 05      [ 1]  167 	mov	0x5005+0, #0x00
                                    168 ;	main.c: 185: GPIOB->DDR = GPIO_DDR_RESET_VALUE; /* Reset Data Direction Register */
      00003B 35 00 50 07      [ 1]  169 	mov	0x5007+0, #0x00
                                    170 ;	main.c: 186: GPIOB->CR1 = GPIO_CR1_RESET_VALUE; /* Reset Control Register 1 */
      00003F 35 00 50 08      [ 1]  171 	mov	0x5008+0, #0x00
                                    172 ;	main.c: 187: GPIOB->CR2 = GPIO_CR2_RESET_VALUE; /* Reset Control Register 2 */
      000043 35 00 50 09      [ 1]  173 	mov	0x5009+0, #0x00
                                    174 ;	main.c: 189: GPIOD->ODR = GPIO_ODR_RESET_VALUE; /* Reset Output Data Register */
      000047 35 00 50 0F      [ 1]  175 	mov	0x500f+0, #0x00
                                    176 ;	main.c: 190: GPIOD->DDR = GPIO_DDR_RESET_VALUE; /* Reset Data Direction Register */
      00004B 35 00 50 11      [ 1]  177 	mov	0x5011+0, #0x00
                                    178 ;	main.c: 191: GPIOD->CR1 = GPIO_CR1_RESET_VALUE; /* Reset Control Register 1 */
      00004F 35 00 50 12      [ 1]  179 	mov	0x5012+0, #0x00
                                    180 ;	main.c: 192: GPIOD->CR2 = GPIO_CR2_RESET_VALUE; /* Reset Control Register 2 */
      000053 35 00 50 13      [ 1]  181 	mov	0x5013+0, #0x00
                                    182 ;	main.c: 195: GPIOB->DDR |= (uint8_t)(1<<4);
      000057 72 18 50 07      [ 1]  183 	bset	0x5007, #4
                                    184 ;	main.c: 196: GPIOB->ODR |= (uint8_t)(1<<4);
      00005B 72 18 50 05      [ 1]  185 	bset	0x5005, #4
                                    186 ;	main.c: 197: GPIOB->CR1 &= ~(uint8_t)(1<<4);		/*OPEN DRAIN*/
      00005F 72 19 50 08      [ 1]  187 	bres	0x5008, #4
                                    188 ;	main.c: 198: GPIOB->CR2 &= ~(uint8_t)(1<<4);		/*Output Speed Up to 2Mhz*/
      000063 72 19 50 09      [ 1]  189 	bres	0x5009, #4
                                    190 ;	main.c: 201: GPIOB->DDR |= (uint8_t)(1<<5);
      000067 72 1A 50 07      [ 1]  191 	bset	0x5007, #5
                                    192 ;	main.c: 202: GPIOB->ODR |= (uint8_t)(1<<5);
      00006B 72 1A 50 05      [ 1]  193 	bset	0x5005, #5
                                    194 ;	main.c: 203: GPIOB->CR1 &= ~(uint8_t)(1<<5);		/*OPEN DRAIN*/
      00006F 72 1B 50 08      [ 1]  195 	bres	0x5008, #5
                                    196 ;	main.c: 204: GPIOB->CR2 &= ~(uint8_t)(1<<5);		/*Output Speed Up to 2Mhz*/
      000073 72 1B 50 09      [ 1]  197 	bres	0x5009, #5
                                    198 ;	main.c: 207: GPIOD->DDR &= ~(uint8_t)(1<<3);
      000077 72 17 50 11      [ 1]  199 	bres	0x5011, #3
                                    200 ;	main.c: 208: GPIOD->IDR |= (uint8_t)(1<<3);
      00007B 72 16 50 10      [ 1]  201 	bset	0x5010, #3
                                    202 ;	main.c: 209: GPIOD->CR1 |= (uint8_t)(1<<3);		/*PULL UP*/
      00007F 72 16 50 12      [ 1]  203 	bset	0x5012, #3
                                    204 ;	main.c: 210: GPIOD->CR2 &= ~(uint8_t)(1<<3);		/*DISABLE INTERRUPT*/
      000083 72 17 50 13      [ 1]  205 	bres	0x5013, #3
                                    206 ;	main.c: 212: Timer4Config();
      000087 CDr00r00         [ 4]  207 	call	_Timer4Config
                                    208 ;	main.c: 213: I2C_init();
      00008A CDr00r00         [ 4]  209 	call	_I2C_init
                                    210 ;	main.c: 214: OLED_init();
      00008D CDr00rDB         [ 4]  211 	call	_OLED_init
                                    212 ;	main.c: 215: OLED_cursor(0,0);
      000090 4B 00            [ 1]  213 	push	#0x00
      000092 4F               [ 1]  214 	clr	a
      000093 CDr03r03         [ 4]  215 	call	_OLED_cursor
                                    216 ;	main.c: 216: OLED_printP(Message1);
      000096 AEr01r53         [ 2]  217 	ldw	x, #(_Message1+0)
      000099 CDr01r07         [ 4]  218 	call	_OLED_printP
                                    219 ;	main.c: 217: Timer4DelayMs(2000);
      00009C AE 07 D0         [ 2]  220 	ldw	x, #0x07d0
      00009F CDr00r00         [ 4]  221 	call	_Timer4DelayMs
                                    222 ;	main.c: 218: OLED_clear();
      0000A2 CDr03r3B         [ 4]  223 	call	_OLED_clear
                                    224 ;	main.c: 223: while (1)
      0000A5                        225 00104$:
                                    226 ;	main.c: 226: if( (GPIOD->IDR & (1<<3)) == RESET){
      0000A5 C6 50 10         [ 1]  227 	ld	a, 0x5010
      0000A8 A5 08            [ 1]  228 	bcp	a, #0x08
      0000AA 26 12            [ 1]  229 	jrne	00102$
                                    230 ;	main.c: 227: OLED_cursor(10,0);
      0000AC 4B 00            [ 1]  231 	push	#0x00
      0000AE A6 0A            [ 1]  232 	ld	a, #0x0a
      0000B0 CDr03r03         [ 4]  233 	call	_OLED_cursor
                                    234 ;	main.c: 228: OLED_printP("GHI");
      0000B3 AEr01r62         [ 2]  235 	ldw	x, #(___str_0+0)
      0000B6 CDr01r07         [ 4]  236 	call	_OLED_printP
                                    237 ;	main.c: 229: Write_EEPROM(82);
      0000B9 A6 52            [ 1]  238 	ld	a, #0x52
      0000BB CDr00r00         [ 4]  239 	call	_Write_EEPROM
      0000BE                        240 00102$:
                                    241 ;	main.c: 232: Data = Read_EEPROM(0x4000);
      0000BE 4B 00            [ 1]  242 	push	#0x00
      0000C0 4B 40            [ 1]  243 	push	#0x40
      0000C2 5F               [ 1]  244 	clrw	x
      0000C3 89               [ 2]  245 	pushw	x
      0000C4 CDr00r22         [ 4]  246 	call	_Read_EEPROM
      0000C7 C7u00u00         [ 1]  247 	ld	_Data+0, a
                                    248 ;	main.c: 233: OLED_cursor(0,2);
      0000CA 4B 02            [ 1]  249 	push	#0x02
      0000CC 4F               [ 1]  250 	clr	a
      0000CD CDr03r03         [ 4]  251 	call	_OLED_cursor
                                    252 ;	main.c: 234: OLED_printNum(Data);
      0000D0 C6u00u00         [ 1]  253 	ld	a, _Data+0
      0000D3 5F               [ 1]  254 	clrw	x
      0000D4 97               [ 1]  255 	ld	xl, a
      0000D5 CDr01r5F         [ 4]  256 	call	_OLED_printNum
      0000D8 20 CB            [ 2]  257 	jra	00104$
                                    258 ;	main.c: 241: }
      0000DA 81               [ 4]  259 	ret
                                    260 ;	main.c: 243: void OLED_init(void) {
                                    261 ;	-----------------------------------------
                                    262 ;	 function OLED_init
                                    263 ;	-----------------------------------------
      0000DB                        264 _OLED_init:
      0000DB 88               [ 1]  265 	push	a
                                    266 ;	main.c: 244: I2C_start();
      0000DC CDr00r00         [ 4]  267 	call	_I2C_start
                                    268 ;	main.c: 245: I2C_address(OLED_I2C_ADDR, I2C_DIRECTION_TX);
      0000DF 4B 00            [ 1]  269 	push	#0x00
      0000E1 A6 78            [ 1]  270 	ld	a, #0x78
      0000E3 CDr00r00         [ 4]  271 	call	_I2C_address
                                    272 ;	main.c: 246: I2C_write(OLED_CMD_MODE);
      0000E6 4F               [ 1]  273 	clr	a
      0000E7 CDr00r00         [ 4]  274 	call	_I2C_write
                                    275 ;	main.c: 247: for (uint8_t i = 0;i < 12;i++)
      0000EA 0F 01            [ 1]  276 	clr	(0x01, sp)
      0000EC                        277 00103$:
      0000EC 7B 01            [ 1]  278 	ld	a, (0x01, sp)
      0000EE A1 0C            [ 1]  279 	cp	a, #0x0c
      0000F0 24 0F            [ 1]  280 	jrnc	00101$
                                    281 ;	main.c: 249: I2C_write(OLED_INIT_CMD[i]);
      0000F2 5F               [ 1]  282 	clrw	x
      0000F3 7B 01            [ 1]  283 	ld	a, (0x01, sp)
      0000F5 97               [ 1]  284 	ld	xl, a
      0000F6 1Cr00r00         [ 2]  285 	addw	x, #(_OLED_INIT_CMD+0)
      0000F9 F6               [ 1]  286 	ld	a, (x)
      0000FA CDr00r00         [ 4]  287 	call	_I2C_write
                                    288 ;	main.c: 247: for (uint8_t i = 0;i < 12;i++)
      0000FD 0C 01            [ 1]  289 	inc	(0x01, sp)
      0000FF 20 EB            [ 2]  290 	jra	00103$
      000101                        291 00101$:
                                    292 ;	main.c: 251: I2C_stop();
      000101 84               [ 1]  293 	pop	a
      000102 CCr00r00         [ 2]  294 	jp	_I2C_stop
                                    295 ;	main.c: 252: }
      000105 84               [ 1]  296 	pop	a
      000106 81               [ 4]  297 	ret
                                    298 ;	main.c: 253: void OLED_printP(const char *p)
                                    299 ;	-----------------------------------------
                                    300 ;	 function OLED_printP
                                    301 ;	-----------------------------------------
      000107                        302 _OLED_printP:
      000107 52 07            [ 2]  303 	sub	sp, #7
      000109 1F 03            [ 2]  304 	ldw	(0x03, sp), x
                                    305 ;	main.c: 255: I2C_start();
      00010B CDr00r00         [ 4]  306 	call	_I2C_start
                                    307 ;	main.c: 256: I2C_address(OLED_I2C_ADDR,I2C_DIRECTION_TX);
      00010E 4B 00            [ 1]  308 	push	#0x00
      000110 A6 78            [ 1]  309 	ld	a, #0x78
      000112 CDr00r00         [ 4]  310 	call	_I2C_address
                                    311 ;	main.c: 257: I2C_write(OLED_DAT_MODE);
      000115 A6 40            [ 1]  312 	ld	a, #0x40
      000117 CDr00r00         [ 4]  313 	call	_I2C_write
                                    314 ;	main.c: 258: while (*p)
      00011A 16 03            [ 2]  315 	ldw	y, (0x03, sp)
      00011C 17 05            [ 2]  316 	ldw	(0x05, sp), y
      00011E                        317 00102$:
      00011E 1E 05            [ 2]  318 	ldw	x, (0x05, sp)
      000120 F6               [ 1]  319 	ld	a, (x)
      000121 6B 07            [ 1]  320 	ld	(0x07, sp), a
      000123 27 35            [ 1]  321 	jreq	00104$
                                    322 ;	main.c: 260: uint16_t offset = *p - 32;
      000125 7B 07            [ 1]  323 	ld	a, (0x07, sp)
      000127 5F               [ 1]  324 	clrw	x
      000128 97               [ 1]  325 	ld	xl, a
      000129 1D 00 20         [ 2]  326 	subw	x, #0x0020
                                    327 ;	main.c: 261: offset += offset << 2;
      00012C 1F 01            [ 2]  328 	ldw	(0x01, sp), x
      00012E 58               [ 2]  329 	sllw	x
      00012F 58               [ 2]  330 	sllw	x
      000130 72 FB 01         [ 2]  331 	addw	x, (0x01, sp)
                                    332 ;	main.c: 262: I2C_write(0x00);
      000133 89               [ 2]  333 	pushw	x
      000134 4F               [ 1]  334 	clr	a
      000135 CDr00r00         [ 4]  335 	call	_I2C_write
      000138 85               [ 2]  336 	popw	x
                                    337 ;	main.c: 263: for(uint8_t i = 5; i;i--){ I2C_write(OLED_FONT[offset++]); }
      000139 A6 05            [ 1]  338 	ld	a, #0x05
      00013B 6B 07            [ 1]  339 	ld	(0x07, sp), a
      00013D                        340 00106$:
      00013D 0D 07            [ 1]  341 	tnz	(0x07, sp)
      00013F 27 12            [ 1]  342 	jreq	00101$
      000141 90 93            [ 1]  343 	ldw	y, x
      000143 72 A9r00r0E      [ 2]  344 	addw	y, #(_OLED_FONT+0)
      000147 5C               [ 1]  345 	incw	x
      000148 90 F6            [ 1]  346 	ld	a, (y)
      00014A 89               [ 2]  347 	pushw	x
      00014B CDr00r00         [ 4]  348 	call	_I2C_write
      00014E 85               [ 2]  349 	popw	x
      00014F 0A 07            [ 1]  350 	dec	(0x07, sp)
      000151 20 EA            [ 2]  351 	jra	00106$
      000153                        352 00101$:
                                    353 ;	main.c: 264: p++;
      000153 1E 05            [ 2]  354 	ldw	x, (0x05, sp)
      000155 5C               [ 1]  355 	incw	x
      000156 1F 05            [ 2]  356 	ldw	(0x05, sp), x
      000158 20 C4            [ 2]  357 	jra	00102$
      00015A                        358 00104$:
                                    359 ;	main.c: 266: I2C_stop();
      00015A 5B 07            [ 2]  360 	addw	sp, #7
                                    361 ;	main.c: 267: }
      00015C CCr00r00         [ 2]  362 	jp	_I2C_stop
                                    363 ;	main.c: 268: void OLED_printNum(uint16_t num){
                                    364 ;	-----------------------------------------
                                    365 ;	 function OLED_printNum
                                    366 ;	-----------------------------------------
      00015F                        367 _OLED_printNum:
      00015F 52 0D            [ 2]  368 	sub	sp, #13
      000161 1F 0A            [ 2]  369 	ldw	(0x0a, sp), x
                                    370 ;	main.c: 269: uint8_t mang[] = {0,0,0,0,0};
      000163 0F 05            [ 1]  371 	clr	(0x05, sp)
      000165 0F 06            [ 1]  372 	clr	(0x06, sp)
      000167 0F 07            [ 1]  373 	clr	(0x07, sp)
      000169 0F 08            [ 1]  374 	clr	(0x08, sp)
      00016B 0F 09            [ 1]  375 	clr	(0x09, sp)
                                    376 ;	main.c: 271: while(num != 0){
      00016D 0F 0D            [ 1]  377 	clr	(0x0d, sp)
      00016F                        378 00101$:
      00016F 1E 0A            [ 2]  379 	ldw	x, (0x0a, sp)
      000171 27 2C            [ 1]  380 	jreq	00103$
                                    381 ;	main.c: 272: mang[count] = num%10;
      000173 5F               [ 1]  382 	clrw	x
      000174 7B 0D            [ 1]  383 	ld	a, (0x0d, sp)
      000176 97               [ 1]  384 	ld	xl, a
      000177 89               [ 2]  385 	pushw	x
      000178 96               [ 1]  386 	ldw	x, sp
      000179 1C 00 07         [ 2]  387 	addw	x, #7
      00017C 72 FB 01         [ 2]  388 	addw	x, (1, sp)
      00017F 1F 03            [ 2]  389 	ldw	(0x03, sp), x
      000181 5B 02            [ 2]  390 	addw	sp, #2
      000183 16 0A            [ 2]  391 	ldw	y, (0x0a, sp)
      000185 17 03            [ 2]  392 	ldw	(0x03, sp), y
      000187 93               [ 1]  393 	ldw	x, y
      000188 90 AE 00 0A      [ 2]  394 	ldw	y, #0x000a
      00018C 65               [ 2]  395 	divw	x, y
      00018D 90 9F            [ 1]  396 	ld	a, yl
      00018F 1E 01            [ 2]  397 	ldw	x, (0x01, sp)
      000191 F7               [ 1]  398 	ld	(x), a
                                    399 ;	main.c: 273: num = num /10;
      000192 1E 03            [ 2]  400 	ldw	x, (0x03, sp)
      000194 90 AE 00 0A      [ 2]  401 	ldw	y, #0x000a
      000198 65               [ 2]  402 	divw	x, y
      000199 1F 0A            [ 2]  403 	ldw	(0x0a, sp), x
                                    404 ;	main.c: 274: ++count;
      00019B 0C 0D            [ 1]  405 	inc	(0x0d, sp)
      00019D 20 D0            [ 2]  406 	jra	00101$
      00019F                        407 00103$:
                                    408 ;	main.c: 276: I2C_start();
      00019F CDr00r00         [ 4]  409 	call	_I2C_start
                                    410 ;	main.c: 277: I2C_address(OLED_I2C_ADDR,I2C_DIRECTION_TX);
      0001A2 4B 00            [ 1]  411 	push	#0x00
      0001A4 A6 78            [ 1]  412 	ld	a, #0x78
      0001A6 CDr00r00         [ 4]  413 	call	_I2C_address
                                    414 ;	main.c: 278: I2C_write(OLED_DAT_MODE);
      0001A9 A6 40            [ 1]  415 	ld	a, #0x40
      0001AB CDr00r00         [ 4]  416 	call	_I2C_write
                                    417 ;	main.c: 279: while(count != 0){
      0001AE 7B 0D            [ 1]  418 	ld	a, (0x0d, sp)
      0001B0 6B 0C            [ 1]  419 	ld	(0x0c, sp), a
      0001B2                        420 00105$:
      0001B2 0D 0C            [ 1]  421 	tnz	(0x0c, sp)
      0001B4 27 43            [ 1]  422 	jreq	00107$
                                    423 ;	main.c: 280: uint16_t offset = mang[count-1] + 16;
      0001B6 7B 0C            [ 1]  424 	ld	a, (0x0c, sp)
      0001B8 4A               [ 1]  425 	dec	a
      0001B9 6B 04            [ 1]  426 	ld	(0x04, sp), a
      0001BB 49               [ 1]  427 	rlc	a
      0001BC 4F               [ 1]  428 	clr	a
      0001BD A2 00            [ 1]  429 	sbc	a, #0x00
      0001BF 6B 03            [ 1]  430 	ld	(0x03, sp), a
      0001C1 96               [ 1]  431 	ldw	x, sp
      0001C2 1C 00 05         [ 2]  432 	addw	x, #5
      0001C5 72 FB 03         [ 2]  433 	addw	x, (0x03, sp)
      0001C8 F6               [ 1]  434 	ld	a, (x)
      0001C9 5F               [ 1]  435 	clrw	x
      0001CA 97               [ 1]  436 	ld	xl, a
      0001CB 1C 00 10         [ 2]  437 	addw	x, #0x0010
                                    438 ;	main.c: 281: offset += offset << 2;
      0001CE 1F 03            [ 2]  439 	ldw	(0x03, sp), x
      0001D0 58               [ 2]  440 	sllw	x
      0001D1 58               [ 2]  441 	sllw	x
      0001D2 72 FB 03         [ 2]  442 	addw	x, (0x03, sp)
                                    443 ;	main.c: 282: I2C_write(0x00);
      0001D5 89               [ 2]  444 	pushw	x
      0001D6 4F               [ 1]  445 	clr	a
      0001D7 CDr00r00         [ 4]  446 	call	_I2C_write
      0001DA 85               [ 2]  447 	popw	x
                                    448 ;	main.c: 283: for(uint8_t i = 5; i;i--){ I2C_write(OLED_FONT[offset++]); }
      0001DB A6 05            [ 1]  449 	ld	a, #0x05
      0001DD 6B 0D            [ 1]  450 	ld	(0x0d, sp), a
      0001DF                        451 00109$:
      0001DF 0D 0D            [ 1]  452 	tnz	(0x0d, sp)
      0001E1 27 12            [ 1]  453 	jreq	00104$
      0001E3 90 93            [ 1]  454 	ldw	y, x
      0001E5 72 A9r00r0E      [ 2]  455 	addw	y, #(_OLED_FONT+0)
      0001E9 5C               [ 1]  456 	incw	x
      0001EA 90 F6            [ 1]  457 	ld	a, (y)
      0001EC 89               [ 2]  458 	pushw	x
      0001ED CDr00r00         [ 4]  459 	call	_I2C_write
      0001F0 85               [ 2]  460 	popw	x
      0001F1 0A 0D            [ 1]  461 	dec	(0x0d, sp)
      0001F3 20 EA            [ 2]  462 	jra	00109$
      0001F5                        463 00104$:
                                    464 ;	main.c: 284: --count;
      0001F5 0A 0C            [ 1]  465 	dec	(0x0c, sp)
      0001F7 20 B9            [ 2]  466 	jra	00105$
      0001F9                        467 00107$:
                                    468 ;	main.c: 286: I2C_stop();		
      0001F9 CDr00r00         [ 4]  469 	call	_I2C_stop
                                    470 ;	main.c: 287: }
      0001FC 5B 0D            [ 2]  471 	addw	sp, #13
      0001FE 81               [ 4]  472 	ret
                                    473 ;	main.c: 288: void OLED_printFloat(float num){
                                    474 ;	-----------------------------------------
                                    475 ;	 function OLED_printFloat
                                    476 ;	-----------------------------------------
      0001FF                        477 _OLED_printFloat:
      0001FF 52 0B            [ 2]  478 	sub	sp, #11
                                    479 ;	main.c: 289: uint16_t num2 = num * 100;
      000201 1E 10            [ 2]  480 	ldw	x, (0x10, sp)
      000203 89               [ 2]  481 	pushw	x
      000204 1E 10            [ 2]  482 	ldw	x, (0x10, sp)
      000206 89               [ 2]  483 	pushw	x
      000207 5F               [ 1]  484 	clrw	x
      000208 89               [ 2]  485 	pushw	x
      000209 4B C8            [ 1]  486 	push	#0xc8
      00020B 4B 42            [ 1]  487 	push	#0x42
      00020D CDr00r00         [ 4]  488 	call	___fsmul
      000210 89               [ 2]  489 	pushw	x
      000211 90 89            [ 2]  490 	pushw	y
      000213 CDr00r00         [ 4]  491 	call	___fs2uint
      000216 1F 01            [ 2]  492 	ldw	(0x01, sp), x
                                    493 ;	main.c: 290: uint8_t mang[] = {0,0,0,0,0};
      000218 0F 05            [ 1]  494 	clr	(0x05, sp)
      00021A 0F 06            [ 1]  495 	clr	(0x06, sp)
      00021C 0F 07            [ 1]  496 	clr	(0x07, sp)
      00021E 0F 08            [ 1]  497 	clr	(0x08, sp)
      000220 0F 09            [ 1]  498 	clr	(0x09, sp)
                                    499 ;	main.c: 291: uint8_t count = 0;
      000222 0F 0B            [ 1]  500 	clr	(0x0b, sp)
                                    501 ;	main.c: 292: while(count<5){
      000224                        502 00103$:
      000224 7B 0B            [ 1]  503 	ld	a, (0x0b, sp)
      000226 A1 05            [ 1]  504 	cp	a, #0x05
      000228 24 38            [ 1]  505 	jrnc	00105$
                                    506 ;	main.c: 293: mang[count] = (uint8_t)num2%10;
      00022A 5F               [ 1]  507 	clrw	x
      00022B 7B 0B            [ 1]  508 	ld	a, (0x0b, sp)
      00022D 97               [ 1]  509 	ld	xl, a
      00022E 89               [ 2]  510 	pushw	x
      00022F 96               [ 1]  511 	ldw	x, sp
      000230 1C 00 07         [ 2]  512 	addw	x, #7
      000233 72 FB 01         [ 2]  513 	addw	x, (1, sp)
      000236 1F 05            [ 2]  514 	ldw	(0x05, sp), x
      000238 5B 02            [ 2]  515 	addw	sp, #2
      00023A 7B 02            [ 1]  516 	ld	a, (0x02, sp)
      00023C 5F               [ 1]  517 	clrw	x
      00023D 4B 0A            [ 1]  518 	push	#0x0a
      00023F 4B 00            [ 1]  519 	push	#0x00
      000241 97               [ 1]  520 	ld	xl, a
      000242 CDr00r00         [ 4]  521 	call	__modsint
      000245 9F               [ 1]  522 	ld	a, xl
      000246 1E 03            [ 2]  523 	ldw	x, (0x03, sp)
      000248 F7               [ 1]  524 	ld	(x), a
                                    525 ;	main.c: 294: num2 = num2 /10;
      000249 1E 01            [ 2]  526 	ldw	x, (0x01, sp)
      00024B 90 AE 00 0A      [ 2]  527 	ldw	y, #0x000a
      00024F 65               [ 2]  528 	divw	x, y
      000250 1F 01            [ 2]  529 	ldw	(0x01, sp), x
                                    530 ;	main.c: 295: ++count;
      000252 0C 0B            [ 1]  531 	inc	(0x0b, sp)
                                    532 ;	main.c: 296: if(count==2) {mang[2]= 48; ++count;}
      000254 7B 0B            [ 1]  533 	ld	a, (0x0b, sp)
      000256 A1 02            [ 1]  534 	cp	a, #0x02
      000258 26 CA            [ 1]  535 	jrne	00103$
      00025A A6 30            [ 1]  536 	ld	a, #0x30
      00025C 6B 07            [ 1]  537 	ld	(0x07, sp), a
      00025E 0C 0B            [ 1]  538 	inc	(0x0b, sp)
      000260 20 C2            [ 2]  539 	jra	00103$
      000262                        540 00105$:
                                    541 ;	main.c: 298: I2C_start();
      000262 CDr00r00         [ 4]  542 	call	_I2C_start
                                    543 ;	main.c: 299: I2C_address(OLED_I2C_ADDR,I2C_DIRECTION_TX);
      000265 4B 00            [ 1]  544 	push	#0x00
      000267 A6 78            [ 1]  545 	ld	a, #0x78
      000269 CDr00r00         [ 4]  546 	call	_I2C_address
                                    547 ;	main.c: 300: I2C_write(OLED_DAT_MODE);
      00026C A6 40            [ 1]  548 	ld	a, #0x40
      00026E CDr00r00         [ 4]  549 	call	_I2C_write
                                    550 ;	main.c: 301: while(count != 0){
      000271 7B 0B            [ 1]  551 	ld	a, (0x0b, sp)
      000273 6B 0A            [ 1]  552 	ld	(0x0a, sp), a
      000275                        553 00107$:
      000275 0D 0A            [ 1]  554 	tnz	(0x0a, sp)
      000277 27 43            [ 1]  555 	jreq	00109$
                                    556 ;	main.c: 302: uint16_t offset = mang[count-1] + 16;
      000279 7B 0A            [ 1]  557 	ld	a, (0x0a, sp)
      00027B 4A               [ 1]  558 	dec	a
      00027C 6B 04            [ 1]  559 	ld	(0x04, sp), a
      00027E 49               [ 1]  560 	rlc	a
      00027F 4F               [ 1]  561 	clr	a
      000280 A2 00            [ 1]  562 	sbc	a, #0x00
      000282 6B 03            [ 1]  563 	ld	(0x03, sp), a
      000284 96               [ 1]  564 	ldw	x, sp
      000285 1C 00 05         [ 2]  565 	addw	x, #5
      000288 72 FB 03         [ 2]  566 	addw	x, (0x03, sp)
      00028B F6               [ 1]  567 	ld	a, (x)
      00028C 5F               [ 1]  568 	clrw	x
      00028D 97               [ 1]  569 	ld	xl, a
      00028E 1C 00 10         [ 2]  570 	addw	x, #0x0010
                                    571 ;	main.c: 303: offset += offset << 2;
      000291 1F 03            [ 2]  572 	ldw	(0x03, sp), x
      000293 58               [ 2]  573 	sllw	x
      000294 58               [ 2]  574 	sllw	x
      000295 72 FB 03         [ 2]  575 	addw	x, (0x03, sp)
                                    576 ;	main.c: 304: I2C_write(0x00);
      000298 89               [ 2]  577 	pushw	x
      000299 4F               [ 1]  578 	clr	a
      00029A CDr00r00         [ 4]  579 	call	_I2C_write
      00029D 85               [ 2]  580 	popw	x
                                    581 ;	main.c: 305: for(uint8_t i = 5; i;i--){ I2C_write(OLED_FONT[offset++]); }
      00029E A6 05            [ 1]  582 	ld	a, #0x05
      0002A0 6B 0B            [ 1]  583 	ld	(0x0b, sp), a
      0002A2                        584 00111$:
      0002A2 0D 0B            [ 1]  585 	tnz	(0x0b, sp)
      0002A4 27 12            [ 1]  586 	jreq	00106$
      0002A6 90 93            [ 1]  587 	ldw	y, x
      0002A8 72 A9r00r0E      [ 2]  588 	addw	y, #(_OLED_FONT+0)
      0002AC 5C               [ 1]  589 	incw	x
      0002AD 90 F6            [ 1]  590 	ld	a, (y)
      0002AF 89               [ 2]  591 	pushw	x
      0002B0 CDr00r00         [ 4]  592 	call	_I2C_write
      0002B3 85               [ 2]  593 	popw	x
      0002B4 0A 0B            [ 1]  594 	dec	(0x0b, sp)
      0002B6 20 EA            [ 2]  595 	jra	00111$
      0002B8                        596 00106$:
                                    597 ;	main.c: 306: --count;
      0002B8 0A 0A            [ 1]  598 	dec	(0x0a, sp)
      0002BA 20 B9            [ 2]  599 	jra	00107$
      0002BC                        600 00109$:
                                    601 ;	main.c: 308: I2C_stop();		
      0002BC CDr00r00         [ 4]  602 	call	_I2C_stop
                                    603 ;	main.c: 310: }
      0002BF 1E 0C            [ 2]  604 	ldw	x, (12, sp)
      0002C1 5B 11            [ 2]  605 	addw	sp, #17
      0002C3 FC               [ 2]  606 	jp	(x)
                                    607 ;	main.c: 311: void OLED_printOneNumber(uint8_t num)
                                    608 ;	-----------------------------------------
                                    609 ;	 function OLED_printOneNumber
                                    610 ;	-----------------------------------------
      0002C4                        611 _OLED_printOneNumber:
      0002C4 52 02            [ 2]  612 	sub	sp, #2
                                    613 ;	main.c: 313: uint16_t offset = num + 16;
      0002C6 5F               [ 1]  614 	clrw	x
      0002C7 97               [ 1]  615 	ld	xl, a
      0002C8 1C 00 10         [ 2]  616 	addw	x, #0x0010
                                    617 ;	main.c: 314: offset += offset << 2;
      0002CB 1F 01            [ 2]  618 	ldw	(0x01, sp), x
      0002CD 58               [ 2]  619 	sllw	x
      0002CE 58               [ 2]  620 	sllw	x
      0002CF 72 FB 01         [ 2]  621 	addw	x, (0x01, sp)
      0002D2 1F 01            [ 2]  622 	ldw	(0x01, sp), x
                                    623 ;	main.c: 315: I2C_start();
      0002D4 CDr00r00         [ 4]  624 	call	_I2C_start
                                    625 ;	main.c: 316: I2C_address(OLED_I2C_ADDR, OLED_DAT_MODE);
      0002D7 4B 01            [ 1]  626 	push	#0x01
      0002D9 A6 78            [ 1]  627 	ld	a, #0x78
      0002DB CDr00r00         [ 4]  628 	call	_I2C_address
                                    629 ;	main.c: 317: I2C_write(0x00);
      0002DE 4F               [ 1]  630 	clr	a
      0002DF CDr00r00         [ 4]  631 	call	_I2C_write
                                    632 ;	main.c: 318: for(uint8_t i = 5; i;i--){ I2C_write(OLED_FONT[offset++]); }
      0002E2 1E 01            [ 2]  633 	ldw	x, (0x01, sp)
      0002E4 A6 05            [ 1]  634 	ld	a, #0x05
      0002E6 6B 02            [ 1]  635 	ld	(0x02, sp), a
      0002E8                        636 00103$:
      0002E8 0D 02            [ 1]  637 	tnz	(0x02, sp)
      0002EA 27 12            [ 1]  638 	jreq	00101$
      0002EC 90 93            [ 1]  639 	ldw	y, x
      0002EE 72 A9r00r0E      [ 2]  640 	addw	y, #(_OLED_FONT+0)
      0002F2 5C               [ 1]  641 	incw	x
      0002F3 90 F6            [ 1]  642 	ld	a, (y)
      0002F5 89               [ 2]  643 	pushw	x
      0002F6 CDr00r00         [ 4]  644 	call	_I2C_write
      0002F9 85               [ 2]  645 	popw	x
      0002FA 0A 02            [ 1]  646 	dec	(0x02, sp)
      0002FC 20 EA            [ 2]  647 	jra	00103$
      0002FE                        648 00101$:
                                    649 ;	main.c: 319: I2C_stop();
      0002FE 5B 02            [ 2]  650 	addw	sp, #2
                                    651 ;	main.c: 320: }
      000300 CCr00r00         [ 2]  652 	jp	_I2C_stop
                                    653 ;	main.c: 321: void OLED_cursor(uint8_t xpos, uint8_t ypos)
                                    654 ;	-----------------------------------------
                                    655 ;	 function OLED_cursor
                                    656 ;	-----------------------------------------
      000303                        657 _OLED_cursor:
      000303 88               [ 1]  658 	push	a
      000304 6B 01            [ 1]  659 	ld	(0x01, sp), a
                                    660 ;	main.c: 323: I2C_start();
      000306 CDr00r00         [ 4]  661 	call	_I2C_start
                                    662 ;	main.c: 324: I2C_address(OLED_I2C_ADDR, I2C_DIRECTION_TX);
      000309 4B 00            [ 1]  663 	push	#0x00
      00030B A6 78            [ 1]  664 	ld	a, #0x78
      00030D CDr00r00         [ 4]  665 	call	_I2C_address
                                    666 ;	main.c: 325: I2C_write(OLED_CMD_MODE);
      000310 4F               [ 1]  667 	clr	a
      000311 CDr00r00         [ 4]  668 	call	_I2C_write
                                    669 ;	main.c: 326: I2C_write(xpos & 0x0F);
      000314 7B 01            [ 1]  670 	ld	a, (0x01, sp)
      000316 A4 0F            [ 1]  671 	and	a, #0x0f
      000318 CDr00r00         [ 4]  672 	call	_I2C_write
                                    673 ;	main.c: 327: I2C_write(0x10 | (xpos >> 4));
      00031B 7B 01            [ 1]  674 	ld	a, (0x01, sp)
      00031D 4E               [ 1]  675 	swap	a
      00031E A4 0F            [ 1]  676 	and	a, #0x0f
      000320 AA 10            [ 1]  677 	or	a, #0x10
      000322 CDr00r00         [ 4]  678 	call	_I2C_write
                                    679 ;	main.c: 328: I2C_write(0xB0 | (ypos & 0x07));
      000325 7B 04            [ 1]  680 	ld	a, (0x04, sp)
      000327 A4 07            [ 1]  681 	and	a, #0x07
      000329 AA B0            [ 1]  682 	or	a, #0xb0
      00032B CDr00r00         [ 4]  683 	call	_I2C_write
                                    684 ;	main.c: 329: I2C_stop();
      00032E 1E 02            [ 2]  685 	ldw	x, (2, sp)
      000330 1F 03            [ 2]  686 	ldw	(3, sp), x
      000332 5B 02            [ 2]  687 	addw	sp, #2
      000334 CCr00r00         [ 2]  688 	jp	_I2C_stop
                                    689 ;	main.c: 330: }
      000337 84               [ 1]  690 	pop	a
      000338 85               [ 2]  691 	popw	x
      000339 84               [ 1]  692 	pop	a
      00033A FC               [ 2]  693 	jp	(x)
                                    694 ;	main.c: 331: void OLED_clear(void)
                                    695 ;	-----------------------------------------
                                    696 ;	 function OLED_clear
                                    697 ;	-----------------------------------------
      00033B                        698 _OLED_clear:
                                    699 ;	main.c: 333: OLED_cursor(0,0);
      00033B 4B 00            [ 1]  700 	push	#0x00
      00033D 4F               [ 1]  701 	clr	a
      00033E CDr03r03         [ 4]  702 	call	_OLED_cursor
                                    703 ;	main.c: 334: I2C_start();
      000341 CDr00r00         [ 4]  704 	call	_I2C_start
                                    705 ;	main.c: 335: I2C_address(OLED_I2C_ADDR, I2C_DIRECTION_TX);
      000344 4B 00            [ 1]  706 	push	#0x00
      000346 A6 78            [ 1]  707 	ld	a, #0x78
      000348 CDr00r00         [ 4]  708 	call	_I2C_address
                                    709 ;	main.c: 336: I2C_write(OLED_DAT_MODE);
      00034B A6 40            [ 1]  710 	ld	a, #0x40
      00034D CDr00r00         [ 4]  711 	call	_I2C_write
                                    712 ;	main.c: 337: for (uint16_t i=0;i<512;i++)
      000350 5F               [ 1]  713 	clrw	x
      000351                        714 00103$:
      000351 90 93            [ 1]  715 	ldw	y, x
      000353 90 A3 02 00      [ 2]  716 	cpw	y, #0x0200
      000357 25 03            [ 1]  717 	jrc	00118$
      000359 CCr00r00         [ 2]  718 	jp	_I2C_stop
      00035C                        719 00118$:
                                    720 ;	main.c: 339: I2C_write(0x00);
      00035C 89               [ 2]  721 	pushw	x
      00035D 4F               [ 1]  722 	clr	a
      00035E CDr00r00         [ 4]  723 	call	_I2C_write
      000361 85               [ 2]  724 	popw	x
                                    725 ;	main.c: 337: for (uint16_t i=0;i<512;i++)
      000362 5C               [ 1]  726 	incw	x
                                    727 ;	main.c: 341: I2C_stop();
                                    728 ;	main.c: 342: }
      000363 20 EC            [ 2]  729 	jra	00103$
                                    730 	.area CODE
                                    731 	.area CONST
      000000                        732 _OLED_INIT_CMD:
      000000 A8                     733 	.db #0xa8	; 168
      000001 1F                     734 	.db #0x1f	; 31
      000002 22                     735 	.db #0x22	; 34
      000003 00                     736 	.db #0x00	; 0
      000004 03                     737 	.db #0x03	; 3
      000005 20                     738 	.db #0x20	; 32
      000006 00                     739 	.db #0x00	; 0
      000007 DA                     740 	.db #0xda	; 218
      000008 02                     741 	.db #0x02	; 2
      000009 8D                     742 	.db #0x8d	; 141
      00000A 14                     743 	.db #0x14	; 20
      00000B AF                     744 	.db #0xaf	; 175
      00000C A1                     745 	.db #0xa1	; 161
      00000D C8                     746 	.db #0xc8	; 200
      00000E                        747 _OLED_FONT:
      00000E 00                     748 	.db #0x00	; 0
      00000F 00                     749 	.db #0x00	; 0
      000010 00                     750 	.db #0x00	; 0
      000011 00                     751 	.db #0x00	; 0
      000012 00                     752 	.db #0x00	; 0
      000013 00                     753 	.db #0x00	; 0
      000014 00                     754 	.db #0x00	; 0
      000015 2F                     755 	.db #0x2f	; 47
      000016 00                     756 	.db #0x00	; 0
      000017 00                     757 	.db #0x00	; 0
      000018 00                     758 	.db #0x00	; 0
      000019 07                     759 	.db #0x07	; 7
      00001A 00                     760 	.db #0x00	; 0
      00001B 07                     761 	.db #0x07	; 7
      00001C 00                     762 	.db #0x00	; 0
      00001D 14                     763 	.db #0x14	; 20
      00001E 7F                     764 	.db #0x7f	; 127
      00001F 14                     765 	.db #0x14	; 20
      000020 7F                     766 	.db #0x7f	; 127
      000021 14                     767 	.db #0x14	; 20
      000022 24                     768 	.db #0x24	; 36
      000023 2A                     769 	.db #0x2a	; 42
      000024 7F                     770 	.db #0x7f	; 127
      000025 2A                     771 	.db #0x2a	; 42
      000026 12                     772 	.db #0x12	; 18
      000027 62                     773 	.db #0x62	; 98	'b'
      000028 64                     774 	.db #0x64	; 100	'd'
      000029 08                     775 	.db #0x08	; 8
      00002A 13                     776 	.db #0x13	; 19
      00002B 23                     777 	.db #0x23	; 35
      00002C 36                     778 	.db #0x36	; 54	'6'
      00002D 49                     779 	.db #0x49	; 73	'I'
      00002E 55                     780 	.db #0x55	; 85	'U'
      00002F 22                     781 	.db #0x22	; 34
      000030 50                     782 	.db #0x50	; 80	'P'
      000031 00                     783 	.db #0x00	; 0
      000032 05                     784 	.db #0x05	; 5
      000033 03                     785 	.db #0x03	; 3
      000034 00                     786 	.db #0x00	; 0
      000035 00                     787 	.db #0x00	; 0
      000036 00                     788 	.db #0x00	; 0
      000037 1C                     789 	.db #0x1c	; 28
      000038 22                     790 	.db #0x22	; 34
      000039 41                     791 	.db #0x41	; 65	'A'
      00003A 00                     792 	.db #0x00	; 0
      00003B 00                     793 	.db #0x00	; 0
      00003C 41                     794 	.db #0x41	; 65	'A'
      00003D 22                     795 	.db #0x22	; 34
      00003E 1C                     796 	.db #0x1c	; 28
      00003F 00                     797 	.db #0x00	; 0
      000040 14                     798 	.db #0x14	; 20
      000041 08                     799 	.db #0x08	; 8
      000042 3E                     800 	.db #0x3e	; 62
      000043 08                     801 	.db #0x08	; 8
      000044 14                     802 	.db #0x14	; 20
      000045 08                     803 	.db #0x08	; 8
      000046 08                     804 	.db #0x08	; 8
      000047 3E                     805 	.db #0x3e	; 62
      000048 08                     806 	.db #0x08	; 8
      000049 08                     807 	.db #0x08	; 8
      00004A 00                     808 	.db #0x00	; 0
      00004B 00                     809 	.db #0x00	; 0
      00004C A0                     810 	.db #0xa0	; 160
      00004D 60                     811 	.db #0x60	; 96
      00004E 00                     812 	.db #0x00	; 0
      00004F 08                     813 	.db #0x08	; 8
      000050 08                     814 	.db #0x08	; 8
      000051 08                     815 	.db #0x08	; 8
      000052 08                     816 	.db #0x08	; 8
      000053 08                     817 	.db #0x08	; 8
      000054 00                     818 	.db #0x00	; 0
      000055 60                     819 	.db #0x60	; 96
      000056 60                     820 	.db #0x60	; 96
      000057 00                     821 	.db #0x00	; 0
      000058 00                     822 	.db #0x00	; 0
      000059 20                     823 	.db #0x20	; 32
      00005A 10                     824 	.db #0x10	; 16
      00005B 08                     825 	.db #0x08	; 8
      00005C 04                     826 	.db #0x04	; 4
      00005D 02                     827 	.db #0x02	; 2
      00005E 3E                     828 	.db #0x3e	; 62
      00005F 51                     829 	.db #0x51	; 81	'Q'
      000060 49                     830 	.db #0x49	; 73	'I'
      000061 45                     831 	.db #0x45	; 69	'E'
      000062 3E                     832 	.db #0x3e	; 62
      000063 00                     833 	.db #0x00	; 0
      000064 42                     834 	.db #0x42	; 66	'B'
      000065 7F                     835 	.db #0x7f	; 127
      000066 40                     836 	.db #0x40	; 64
      000067 00                     837 	.db #0x00	; 0
      000068 42                     838 	.db #0x42	; 66	'B'
      000069 61                     839 	.db #0x61	; 97	'a'
      00006A 51                     840 	.db #0x51	; 81	'Q'
      00006B 49                     841 	.db #0x49	; 73	'I'
      00006C 46                     842 	.db #0x46	; 70	'F'
      00006D 21                     843 	.db #0x21	; 33
      00006E 41                     844 	.db #0x41	; 65	'A'
      00006F 45                     845 	.db #0x45	; 69	'E'
      000070 4B                     846 	.db #0x4b	; 75	'K'
      000071 31                     847 	.db #0x31	; 49	'1'
      000072 18                     848 	.db #0x18	; 24
      000073 14                     849 	.db #0x14	; 20
      000074 12                     850 	.db #0x12	; 18
      000075 7F                     851 	.db #0x7f	; 127
      000076 10                     852 	.db #0x10	; 16
      000077 27                     853 	.db #0x27	; 39
      000078 45                     854 	.db #0x45	; 69	'E'
      000079 45                     855 	.db #0x45	; 69	'E'
      00007A 45                     856 	.db #0x45	; 69	'E'
      00007B 39                     857 	.db #0x39	; 57	'9'
      00007C 3C                     858 	.db #0x3c	; 60
      00007D 4A                     859 	.db #0x4a	; 74	'J'
      00007E 49                     860 	.db #0x49	; 73	'I'
      00007F 49                     861 	.db #0x49	; 73	'I'
      000080 30                     862 	.db #0x30	; 48	'0'
      000081 01                     863 	.db #0x01	; 1
      000082 71                     864 	.db #0x71	; 113	'q'
      000083 09                     865 	.db #0x09	; 9
      000084 05                     866 	.db #0x05	; 5
      000085 03                     867 	.db #0x03	; 3
      000086 36                     868 	.db #0x36	; 54	'6'
      000087 49                     869 	.db #0x49	; 73	'I'
      000088 49                     870 	.db #0x49	; 73	'I'
      000089 49                     871 	.db #0x49	; 73	'I'
      00008A 36                     872 	.db #0x36	; 54	'6'
      00008B 06                     873 	.db #0x06	; 6
      00008C 49                     874 	.db #0x49	; 73	'I'
      00008D 49                     875 	.db #0x49	; 73	'I'
      00008E 29                     876 	.db #0x29	; 41
      00008F 1E                     877 	.db #0x1e	; 30
      000090 00                     878 	.db #0x00	; 0
      000091 36                     879 	.db #0x36	; 54	'6'
      000092 36                     880 	.db #0x36	; 54	'6'
      000093 00                     881 	.db #0x00	; 0
      000094 00                     882 	.db #0x00	; 0
      000095 00                     883 	.db #0x00	; 0
      000096 56                     884 	.db #0x56	; 86	'V'
      000097 36                     885 	.db #0x36	; 54	'6'
      000098 00                     886 	.db #0x00	; 0
      000099 00                     887 	.db #0x00	; 0
      00009A 08                     888 	.db #0x08	; 8
      00009B 14                     889 	.db #0x14	; 20
      00009C 22                     890 	.db #0x22	; 34
      00009D 41                     891 	.db #0x41	; 65	'A'
      00009E 00                     892 	.db #0x00	; 0
      00009F 14                     893 	.db #0x14	; 20
      0000A0 14                     894 	.db #0x14	; 20
      0000A1 14                     895 	.db #0x14	; 20
      0000A2 14                     896 	.db #0x14	; 20
      0000A3 14                     897 	.db #0x14	; 20
      0000A4 00                     898 	.db #0x00	; 0
      0000A5 41                     899 	.db #0x41	; 65	'A'
      0000A6 22                     900 	.db #0x22	; 34
      0000A7 14                     901 	.db #0x14	; 20
      0000A8 08                     902 	.db #0x08	; 8
      0000A9 02                     903 	.db #0x02	; 2
      0000AA 01                     904 	.db #0x01	; 1
      0000AB 51                     905 	.db #0x51	; 81	'Q'
      0000AC 09                     906 	.db #0x09	; 9
      0000AD 06                     907 	.db #0x06	; 6
      0000AE 32                     908 	.db #0x32	; 50	'2'
      0000AF 49                     909 	.db #0x49	; 73	'I'
      0000B0 59                     910 	.db #0x59	; 89	'Y'
      0000B1 51                     911 	.db #0x51	; 81	'Q'
      0000B2 3E                     912 	.db #0x3e	; 62
      0000B3 7C                     913 	.db #0x7c	; 124
      0000B4 12                     914 	.db #0x12	; 18
      0000B5 11                     915 	.db #0x11	; 17
      0000B6 12                     916 	.db #0x12	; 18
      0000B7 7C                     917 	.db #0x7c	; 124
      0000B8 7F                     918 	.db #0x7f	; 127
      0000B9 49                     919 	.db #0x49	; 73	'I'
      0000BA 49                     920 	.db #0x49	; 73	'I'
      0000BB 49                     921 	.db #0x49	; 73	'I'
      0000BC 36                     922 	.db #0x36	; 54	'6'
      0000BD 3E                     923 	.db #0x3e	; 62
      0000BE 41                     924 	.db #0x41	; 65	'A'
      0000BF 41                     925 	.db #0x41	; 65	'A'
      0000C0 41                     926 	.db #0x41	; 65	'A'
      0000C1 22                     927 	.db #0x22	; 34
      0000C2 7F                     928 	.db #0x7f	; 127
      0000C3 41                     929 	.db #0x41	; 65	'A'
      0000C4 41                     930 	.db #0x41	; 65	'A'
      0000C5 22                     931 	.db #0x22	; 34
      0000C6 1C                     932 	.db #0x1c	; 28
      0000C7 7F                     933 	.db #0x7f	; 127
      0000C8 49                     934 	.db #0x49	; 73	'I'
      0000C9 49                     935 	.db #0x49	; 73	'I'
      0000CA 49                     936 	.db #0x49	; 73	'I'
      0000CB 41                     937 	.db #0x41	; 65	'A'
      0000CC 7F                     938 	.db #0x7f	; 127
      0000CD 09                     939 	.db #0x09	; 9
      0000CE 09                     940 	.db #0x09	; 9
      0000CF 09                     941 	.db #0x09	; 9
      0000D0 01                     942 	.db #0x01	; 1
      0000D1 3E                     943 	.db #0x3e	; 62
      0000D2 41                     944 	.db #0x41	; 65	'A'
      0000D3 49                     945 	.db #0x49	; 73	'I'
      0000D4 49                     946 	.db #0x49	; 73	'I'
      0000D5 7A                     947 	.db #0x7a	; 122	'z'
      0000D6 7F                     948 	.db #0x7f	; 127
      0000D7 08                     949 	.db #0x08	; 8
      0000D8 08                     950 	.db #0x08	; 8
      0000D9 08                     951 	.db #0x08	; 8
      0000DA 7F                     952 	.db #0x7f	; 127
      0000DB 00                     953 	.db #0x00	; 0
      0000DC 41                     954 	.db #0x41	; 65	'A'
      0000DD 7F                     955 	.db #0x7f	; 127
      0000DE 41                     956 	.db #0x41	; 65	'A'
      0000DF 00                     957 	.db #0x00	; 0
      0000E0 20                     958 	.db #0x20	; 32
      0000E1 40                     959 	.db #0x40	; 64
      0000E2 41                     960 	.db #0x41	; 65	'A'
      0000E3 3F                     961 	.db #0x3f	; 63
      0000E4 01                     962 	.db #0x01	; 1
      0000E5 7F                     963 	.db #0x7f	; 127
      0000E6 08                     964 	.db #0x08	; 8
      0000E7 14                     965 	.db #0x14	; 20
      0000E8 22                     966 	.db #0x22	; 34
      0000E9 41                     967 	.db #0x41	; 65	'A'
      0000EA 7F                     968 	.db #0x7f	; 127
      0000EB 40                     969 	.db #0x40	; 64
      0000EC 40                     970 	.db #0x40	; 64
      0000ED 40                     971 	.db #0x40	; 64
      0000EE 40                     972 	.db #0x40	; 64
      0000EF 7F                     973 	.db #0x7f	; 127
      0000F0 02                     974 	.db #0x02	; 2
      0000F1 0C                     975 	.db #0x0c	; 12
      0000F2 02                     976 	.db #0x02	; 2
      0000F3 7F                     977 	.db #0x7f	; 127
      0000F4 7F                     978 	.db #0x7f	; 127
      0000F5 04                     979 	.db #0x04	; 4
      0000F6 08                     980 	.db #0x08	; 8
      0000F7 10                     981 	.db #0x10	; 16
      0000F8 7F                     982 	.db #0x7f	; 127
      0000F9 3E                     983 	.db #0x3e	; 62
      0000FA 41                     984 	.db #0x41	; 65	'A'
      0000FB 41                     985 	.db #0x41	; 65	'A'
      0000FC 41                     986 	.db #0x41	; 65	'A'
      0000FD 3E                     987 	.db #0x3e	; 62
      0000FE 7F                     988 	.db #0x7f	; 127
      0000FF 09                     989 	.db #0x09	; 9
      000100 09                     990 	.db #0x09	; 9
      000101 09                     991 	.db #0x09	; 9
      000102 06                     992 	.db #0x06	; 6
      000103 3E                     993 	.db #0x3e	; 62
      000104 41                     994 	.db #0x41	; 65	'A'
      000105 51                     995 	.db #0x51	; 81	'Q'
      000106 21                     996 	.db #0x21	; 33
      000107 5E                     997 	.db #0x5e	; 94
      000108 7F                     998 	.db #0x7f	; 127
      000109 09                     999 	.db #0x09	; 9
      00010A 19                    1000 	.db #0x19	; 25
      00010B 29                    1001 	.db #0x29	; 41
      00010C 46                    1002 	.db #0x46	; 70	'F'
      00010D 46                    1003 	.db #0x46	; 70	'F'
      00010E 49                    1004 	.db #0x49	; 73	'I'
      00010F 49                    1005 	.db #0x49	; 73	'I'
      000110 49                    1006 	.db #0x49	; 73	'I'
      000111 31                    1007 	.db #0x31	; 49	'1'
      000112 01                    1008 	.db #0x01	; 1
      000113 01                    1009 	.db #0x01	; 1
      000114 7F                    1010 	.db #0x7f	; 127
      000115 01                    1011 	.db #0x01	; 1
      000116 01                    1012 	.db #0x01	; 1
      000117 3F                    1013 	.db #0x3f	; 63
      000118 40                    1014 	.db #0x40	; 64
      000119 40                    1015 	.db #0x40	; 64
      00011A 40                    1016 	.db #0x40	; 64
      00011B 3F                    1017 	.db #0x3f	; 63
      00011C 1F                    1018 	.db #0x1f	; 31
      00011D 20                    1019 	.db #0x20	; 32
      00011E 40                    1020 	.db #0x40	; 64
      00011F 20                    1021 	.db #0x20	; 32
      000120 1F                    1022 	.db #0x1f	; 31
      000121 3F                    1023 	.db #0x3f	; 63
      000122 40                    1024 	.db #0x40	; 64
      000123 38                    1025 	.db #0x38	; 56	'8'
      000124 40                    1026 	.db #0x40	; 64
      000125 3F                    1027 	.db #0x3f	; 63
      000126 63                    1028 	.db #0x63	; 99	'c'
      000127 14                    1029 	.db #0x14	; 20
      000128 08                    1030 	.db #0x08	; 8
      000129 14                    1031 	.db #0x14	; 20
      00012A 63                    1032 	.db #0x63	; 99	'c'
      00012B 07                    1033 	.db #0x07	; 7
      00012C 08                    1034 	.db #0x08	; 8
      00012D 70                    1035 	.db #0x70	; 112	'p'
      00012E 08                    1036 	.db #0x08	; 8
      00012F 07                    1037 	.db #0x07	; 7
      000130 61                    1038 	.db #0x61	; 97	'a'
      000131 51                    1039 	.db #0x51	; 81	'Q'
      000132 49                    1040 	.db #0x49	; 73	'I'
      000133 45                    1041 	.db #0x45	; 69	'E'
      000134 43                    1042 	.db #0x43	; 67	'C'
      000135 00                    1043 	.db #0x00	; 0
      000136 7F                    1044 	.db #0x7f	; 127
      000137 41                    1045 	.db #0x41	; 65	'A'
      000138 41                    1046 	.db #0x41	; 65	'A'
      000139 00                    1047 	.db #0x00	; 0
      00013A 02                    1048 	.db #0x02	; 2
      00013B 04                    1049 	.db #0x04	; 4
      00013C 08                    1050 	.db #0x08	; 8
      00013D 10                    1051 	.db #0x10	; 16
      00013E 20                    1052 	.db #0x20	; 32
      00013F 00                    1053 	.db #0x00	; 0
      000140 41                    1054 	.db #0x41	; 65	'A'
      000141 41                    1055 	.db #0x41	; 65	'A'
      000142 7F                    1056 	.db #0x7f	; 127
      000143 00                    1057 	.db #0x00	; 0
      000144 04                    1058 	.db #0x04	; 4
      000145 02                    1059 	.db #0x02	; 2
      000146 01                    1060 	.db #0x01	; 1
      000147 02                    1061 	.db #0x02	; 2
      000148 04                    1062 	.db #0x04	; 4
      000149 40                    1063 	.db #0x40	; 64
      00014A 40                    1064 	.db #0x40	; 64
      00014B 40                    1065 	.db #0x40	; 64
      00014C 40                    1066 	.db #0x40	; 64
      00014D 40                    1067 	.db #0x40	; 64
      00014E 00                    1068 	.db #0x00	; 0
      00014F 60                    1069 	.db #0x60	; 96
      000150 60                    1070 	.db #0x60	; 96
      000151 00                    1071 	.db #0x00	; 0
      000152 00                    1072 	.db #0x00	; 0
      000153                       1073 _Message1:
      000153 44 4F 20 41 4E        1074 	.ascii "DO AN"
      000158 00                    1075 	.db 0x00
      000159                       1076 _Message2:
      000159 53 4F 20 42 55 4F 43  1077 	.ascii "SO BUOC="
             3D
      000161 00                    1078 	.db 0x00
                                   1079 	.area CONST
      000162                       1080 ___str_0:
      000162 47 48 49              1081 	.ascii "GHI"
      000165 00                    1082 	.db 0x00
                                   1083 	.area CODE
                                   1084 	.area INITIALIZER
                                   1085 	.area CABS (ABS)
