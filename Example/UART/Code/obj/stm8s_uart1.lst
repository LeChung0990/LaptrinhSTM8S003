                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_uart1
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _CLK_GetClockFreq
                                     12 	.globl _UART1_DeInit
                                     13 	.globl _UART1_Init
                                     14 	.globl _UART1_Cmd
                                     15 	.globl _UART1_ITConfig
                                     16 	.globl _UART1_HalfDuplexCmd
                                     17 	.globl _UART1_IrDAConfig
                                     18 	.globl _UART1_IrDACmd
                                     19 	.globl _UART1_LINBreakDetectionConfig
                                     20 	.globl _UART1_LINCmd
                                     21 	.globl _UART1_SmartCardCmd
                                     22 	.globl _UART1_SmartCardNACKCmd
                                     23 	.globl _UART1_WakeUpConfig
                                     24 	.globl _UART1_ReceiverWakeUpCmd
                                     25 	.globl _UART1_ReceiveData8
                                     26 	.globl _UART1_ReceiveData9
                                     27 	.globl _UART1_SendData8
                                     28 	.globl _UART1_SendData9
                                     29 	.globl _UART1_SendBreak
                                     30 	.globl _UART1_SetAddress
                                     31 	.globl _UART1_SetGuardTime
                                     32 	.globl _UART1_SetPrescaler
                                     33 	.globl _UART1_GetFlagStatus
                                     34 	.globl _UART1_ClearFlag
                                     35 	.globl _UART1_GetITStatus
                                     36 	.globl _UART1_ClearITPendingBit
                                     37 ;--------------------------------------------------------
                                     38 ; ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area DATA
                                     41 ;--------------------------------------------------------
                                     42 ; ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area INITIALIZED
                                     45 ;--------------------------------------------------------
                                     46 ; absolute external ram data
                                     47 ;--------------------------------------------------------
                                     48 	.area DABS (ABS)
                                     49 
                                     50 ; default segment ordering for linker
                                     51 	.area HOME
                                     52 	.area GSINIT
                                     53 	.area GSFINAL
                                     54 	.area CONST
                                     55 	.area INITIALIZER
                                     56 	.area CODE
                                     57 
                                     58 ;--------------------------------------------------------
                                     59 ; global & static initialisations
                                     60 ;--------------------------------------------------------
                                     61 	.area HOME
                                     62 	.area GSINIT
                                     63 	.area GSFINAL
                                     64 	.area GSINIT
                                     65 ;--------------------------------------------------------
                                     66 ; Home
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
                                     69 	.area HOME
                                     70 ;--------------------------------------------------------
                                     71 ; code
                                     72 ;--------------------------------------------------------
                                     73 	.area CODE
                                     74 ;	lib/src/stm8s_uart1.c: 53: void UART1_DeInit(void)
                                     75 ;	-----------------------------------------
                                     76 ;	 function UART1_DeInit
                                     77 ;	-----------------------------------------
      000000                         78 _UART1_DeInit:
                                     79 ;	lib/src/stm8s_uart1.c: 57: (void)UART1->SR;
      000000 C6 52 30         [ 1]   80 	ld	a, 0x5230
                                     81 ;	lib/src/stm8s_uart1.c: 58: (void)UART1->DR;
      000003 C6 52 31         [ 1]   82 	ld	a, 0x5231
                                     83 ;	lib/src/stm8s_uart1.c: 60: UART1->BRR2 = UART1_BRR2_RESET_VALUE;  /* Set UART1_BRR2 to reset value 0x00 */
      000006 35 00 52 33      [ 1]   84 	mov	0x5233+0, #0x00
                                     85 ;	lib/src/stm8s_uart1.c: 61: UART1->BRR1 = UART1_BRR1_RESET_VALUE;  /* Set UART1_BRR1 to reset value 0x00 */
      00000A 35 00 52 32      [ 1]   86 	mov	0x5232+0, #0x00
                                     87 ;	lib/src/stm8s_uart1.c: 63: UART1->CR1 = UART1_CR1_RESET_VALUE;  /* Set UART1_CR1 to reset value 0x00 */
      00000E 35 00 52 34      [ 1]   88 	mov	0x5234+0, #0x00
                                     89 ;	lib/src/stm8s_uart1.c: 64: UART1->CR2 = UART1_CR2_RESET_VALUE;  /* Set UART1_CR2 to reset value 0x00 */
      000012 35 00 52 35      [ 1]   90 	mov	0x5235+0, #0x00
                                     91 ;	lib/src/stm8s_uart1.c: 65: UART1->CR3 = UART1_CR3_RESET_VALUE;  /* Set UART1_CR3 to reset value 0x00 */
      000016 35 00 52 36      [ 1]   92 	mov	0x5236+0, #0x00
                                     93 ;	lib/src/stm8s_uart1.c: 66: UART1->CR4 = UART1_CR4_RESET_VALUE;  /* Set UART1_CR4 to reset value 0x00 */
      00001A 35 00 52 37      [ 1]   94 	mov	0x5237+0, #0x00
                                     95 ;	lib/src/stm8s_uart1.c: 67: UART1->CR5 = UART1_CR5_RESET_VALUE;  /* Set UART1_CR5 to reset value 0x00 */
      00001E 35 00 52 38      [ 1]   96 	mov	0x5238+0, #0x00
                                     97 ;	lib/src/stm8s_uart1.c: 69: UART1->GTR = UART1_GTR_RESET_VALUE;
      000022 35 00 52 39      [ 1]   98 	mov	0x5239+0, #0x00
                                     99 ;	lib/src/stm8s_uart1.c: 70: UART1->PSCR = UART1_PSCR_RESET_VALUE;
      000026 35 00 52 3A      [ 1]  100 	mov	0x523a+0, #0x00
                                    101 ;	lib/src/stm8s_uart1.c: 71: }
      00002A 81               [ 4]  102 	ret
                                    103 ;	lib/src/stm8s_uart1.c: 90: void UART1_Init(uint32_t BaudRate, UART1_WordLength_TypeDef WordLength, 
                                    104 ;	-----------------------------------------
                                    105 ;	 function UART1_Init
                                    106 ;	-----------------------------------------
      00002B                        107 _UART1_Init:
      00002B 52 11            [ 2]  108 	sub	sp, #17
                                    109 ;	lib/src/stm8s_uart1.c: 105: UART1->CR1 &= (uint8_t)(~UART1_CR1_M);  
      00002D 72 19 52 34      [ 1]  110 	bres	0x5234, #4
                                    111 ;	lib/src/stm8s_uart1.c: 108: UART1->CR1 |= (uint8_t)WordLength;
      000031 C6 52 34         [ 1]  112 	ld	a, 0x5234
      000034 1A 18            [ 1]  113 	or	a, (0x18, sp)
      000036 C7 52 34         [ 1]  114 	ld	0x5234, a
                                    115 ;	lib/src/stm8s_uart1.c: 111: UART1->CR3 &= (uint8_t)(~UART1_CR3_STOP);  
      000039 C6 52 36         [ 1]  116 	ld	a, 0x5236
      00003C A4 CF            [ 1]  117 	and	a, #0xcf
      00003E C7 52 36         [ 1]  118 	ld	0x5236, a
                                    119 ;	lib/src/stm8s_uart1.c: 113: UART1->CR3 |= (uint8_t)StopBits;  
      000041 C6 52 36         [ 1]  120 	ld	a, 0x5236
      000044 1A 19            [ 1]  121 	or	a, (0x19, sp)
      000046 C7 52 36         [ 1]  122 	ld	0x5236, a
                                    123 ;	lib/src/stm8s_uart1.c: 116: UART1->CR1 &= (uint8_t)(~(UART1_CR1_PCEN | UART1_CR1_PS  ));  
      000049 C6 52 34         [ 1]  124 	ld	a, 0x5234
      00004C A4 F9            [ 1]  125 	and	a, #0xf9
      00004E C7 52 34         [ 1]  126 	ld	0x5234, a
                                    127 ;	lib/src/stm8s_uart1.c: 118: UART1->CR1 |= (uint8_t)Parity;  
      000051 C6 52 34         [ 1]  128 	ld	a, 0x5234
      000054 1A 1A            [ 1]  129 	or	a, (0x1a, sp)
      000056 C7 52 34         [ 1]  130 	ld	0x5234, a
                                    131 ;	lib/src/stm8s_uart1.c: 121: UART1->BRR1 &= (uint8_t)(~UART1_BRR1_DIVM);  
      000059 C6 52 32         [ 1]  132 	ld	a, 0x5232
      00005C 35 00 52 32      [ 1]  133 	mov	0x5232+0, #0x00
                                    134 ;	lib/src/stm8s_uart1.c: 123: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVM);  
      000060 C6 52 33         [ 1]  135 	ld	a, 0x5233
      000063 A4 0F            [ 1]  136 	and	a, #0x0f
      000065 C7 52 33         [ 1]  137 	ld	0x5233, a
                                    138 ;	lib/src/stm8s_uart1.c: 125: UART1->BRR2 &= (uint8_t)(~UART1_BRR2_DIVF);  
      000068 C6 52 33         [ 1]  139 	ld	a, 0x5233
      00006B A4 F0            [ 1]  140 	and	a, #0xf0
      00006D C7 52 33         [ 1]  141 	ld	0x5233, a
                                    142 ;	lib/src/stm8s_uart1.c: 128: BaudRate_Mantissa    = ((uint32_t)CLK_GetClockFreq() / (BaudRate << 4));
      000070 CDr00r00         [ 4]  143 	call	_CLK_GetClockFreq
      000073 1F 10            [ 2]  144 	ldw	(0x10, sp), x
      000075 1E 14            [ 2]  145 	ldw	x, (0x14, sp)
      000077 1F 0A            [ 2]  146 	ldw	(0x0a, sp), x
      000079 1E 16            [ 2]  147 	ldw	x, (0x16, sp)
      00007B A6 04            [ 1]  148 	ld	a, #0x04
      00007D                        149 00127$:
      00007D 58               [ 2]  150 	sllw	x
      00007E 09 0B            [ 1]  151 	rlc	(0x0b, sp)
      000080 09 0A            [ 1]  152 	rlc	(0x0a, sp)
      000082 4A               [ 1]  153 	dec	a
      000083 26 F8            [ 1]  154 	jrne	00127$
      000085 1F 0C            [ 2]  155 	ldw	(0x0c, sp), x
      000087 89               [ 2]  156 	pushw	x
      000088 1E 0C            [ 2]  157 	ldw	x, (0x0c, sp)
      00008A 89               [ 2]  158 	pushw	x
      00008B 1E 14            [ 2]  159 	ldw	x, (0x14, sp)
      00008D 89               [ 2]  160 	pushw	x
      00008E 90 89            [ 2]  161 	pushw	y
      000090 CDr00r00         [ 4]  162 	call	__divulong
      000093 5B 08            [ 2]  163 	addw	sp, #8
      000095 1F 10            [ 2]  164 	ldw	(0x10, sp), x
      000097 17 0E            [ 2]  165 	ldw	(0x0e, sp), y
      000099 16 10            [ 2]  166 	ldw	y, (0x10, sp)
      00009B 17 03            [ 2]  167 	ldw	(0x03, sp), y
      00009D 16 0E            [ 2]  168 	ldw	y, (0x0e, sp)
      00009F 17 01            [ 2]  169 	ldw	(0x01, sp), y
                                    170 ;	lib/src/stm8s_uart1.c: 129: BaudRate_Mantissa100 = (((uint32_t)CLK_GetClockFreq() * 100) / (BaudRate << 4));
      0000A1 CDr00r00         [ 4]  171 	call	_CLK_GetClockFreq
      0000A4 1F 10            [ 2]  172 	ldw	(0x10, sp), x
      0000A6 17 0E            [ 2]  173 	ldw	(0x0e, sp), y
      0000A8 1E 10            [ 2]  174 	ldw	x, (0x10, sp)
      0000AA 89               [ 2]  175 	pushw	x
      0000AB 1E 10            [ 2]  176 	ldw	x, (0x10, sp)
      0000AD 89               [ 2]  177 	pushw	x
      0000AE 4B 64            [ 1]  178 	push	#0x64
      0000B0 5F               [ 1]  179 	clrw	x
      0000B1 89               [ 2]  180 	pushw	x
      0000B2 4B 00            [ 1]  181 	push	#0x00
      0000B4 CDr00r00         [ 4]  182 	call	__mullong
      0000B7 5B 08            [ 2]  183 	addw	sp, #8
      0000B9 1F 10            [ 2]  184 	ldw	(0x10, sp), x
      0000BB 1E 0C            [ 2]  185 	ldw	x, (0x0c, sp)
      0000BD 89               [ 2]  186 	pushw	x
      0000BE 1E 0C            [ 2]  187 	ldw	x, (0x0c, sp)
      0000C0 89               [ 2]  188 	pushw	x
      0000C1 1E 14            [ 2]  189 	ldw	x, (0x14, sp)
      0000C3 89               [ 2]  190 	pushw	x
      0000C4 90 89            [ 2]  191 	pushw	y
      0000C6 CDr00r00         [ 4]  192 	call	__divulong
      0000C9 5B 08            [ 2]  193 	addw	sp, #8
      0000CB 1F 07            [ 2]  194 	ldw	(0x07, sp), x
      0000CD 17 05            [ 2]  195 	ldw	(0x05, sp), y
                                    196 ;	lib/src/stm8s_uart1.c: 131: UART1->BRR2 |= (uint8_t)((uint8_t)(((BaudRate_Mantissa100 - (BaudRate_Mantissa * 100)) << 4) / 100) & (uint8_t)0x0F); 
      0000CF C6 52 33         [ 1]  197 	ld	a, 0x5233
      0000D2 6B 09            [ 1]  198 	ld	(0x09, sp), a
      0000D4 1E 03            [ 2]  199 	ldw	x, (0x03, sp)
      0000D6 89               [ 2]  200 	pushw	x
      0000D7 1E 03            [ 2]  201 	ldw	x, (0x03, sp)
      0000D9 89               [ 2]  202 	pushw	x
      0000DA 4B 64            [ 1]  203 	push	#0x64
      0000DC 5F               [ 1]  204 	clrw	x
      0000DD 89               [ 2]  205 	pushw	x
      0000DE 4B 00            [ 1]  206 	push	#0x00
      0000E0 CDr00r00         [ 4]  207 	call	__mullong
      0000E3 5B 08            [ 2]  208 	addw	sp, #8
      0000E5 1F 0C            [ 2]  209 	ldw	(0x0c, sp), x
      0000E7 17 0A            [ 2]  210 	ldw	(0x0a, sp), y
      0000E9 1E 07            [ 2]  211 	ldw	x, (0x07, sp)
      0000EB 72 F0 0C         [ 2]  212 	subw	x, (0x0c, sp)
      0000EE 1F 10            [ 2]  213 	ldw	(0x10, sp), x
      0000F0 7B 06            [ 1]  214 	ld	a, (0x06, sp)
      0000F2 12 0B            [ 1]  215 	sbc	a, (0x0b, sp)
      0000F4 6B 0F            [ 1]  216 	ld	(0x0f, sp), a
      0000F6 7B 05            [ 1]  217 	ld	a, (0x05, sp)
      0000F8 12 0A            [ 1]  218 	sbc	a, (0x0a, sp)
      0000FA 6B 0E            [ 1]  219 	ld	(0x0e, sp), a
      0000FC 1E 10            [ 2]  220 	ldw	x, (0x10, sp)
      0000FE 16 0E            [ 2]  221 	ldw	y, (0x0e, sp)
      000100 A6 04            [ 1]  222 	ld	a, #0x04
      000102                        223 00129$:
      000102 58               [ 2]  224 	sllw	x
      000103 90 59            [ 2]  225 	rlcw	y
      000105 4A               [ 1]  226 	dec	a
      000106 26 FA            [ 1]  227 	jrne	00129$
      000108 4B 64            [ 1]  228 	push	#0x64
      00010A 4B 00            [ 1]  229 	push	#0x00
      00010C 4B 00            [ 1]  230 	push	#0x00
      00010E 4B 00            [ 1]  231 	push	#0x00
      000110 89               [ 2]  232 	pushw	x
      000111 90 89            [ 2]  233 	pushw	y
      000113 CDr00r00         [ 4]  234 	call	__divulong
      000116 5B 08            [ 2]  235 	addw	sp, #8
      000118 9F               [ 1]  236 	ld	a, xl
      000119 A4 0F            [ 1]  237 	and	a, #0x0f
      00011B 1A 09            [ 1]  238 	or	a, (0x09, sp)
      00011D C7 52 33         [ 1]  239 	ld	0x5233, a
                                    240 ;	lib/src/stm8s_uart1.c: 133: UART1->BRR2 |= (uint8_t)((BaudRate_Mantissa >> 4) & (uint8_t)0xF0); 
      000120 C6 52 33         [ 1]  241 	ld	a, 0x5233
      000123 6B 11            [ 1]  242 	ld	(0x11, sp), a
      000125 1E 03            [ 2]  243 	ldw	x, (0x03, sp)
      000127 A6 10            [ 1]  244 	ld	a, #0x10
      000129 62               [ 2]  245 	div	x, a
      00012A 9F               [ 1]  246 	ld	a, xl
      00012B A4 F0            [ 1]  247 	and	a, #0xf0
      00012D 1A 11            [ 1]  248 	or	a, (0x11, sp)
      00012F C7 52 33         [ 1]  249 	ld	0x5233, a
                                    250 ;	lib/src/stm8s_uart1.c: 135: UART1->BRR1 |= (uint8_t)BaudRate_Mantissa;           
      000132 C6 52 32         [ 1]  251 	ld	a, 0x5232
      000135 6B 11            [ 1]  252 	ld	(0x11, sp), a
      000137 7B 04            [ 1]  253 	ld	a, (0x04, sp)
      000139 1A 11            [ 1]  254 	or	a, (0x11, sp)
      00013B C7 52 32         [ 1]  255 	ld	0x5232, a
                                    256 ;	lib/src/stm8s_uart1.c: 138: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      00013E C6 52 35         [ 1]  257 	ld	a, 0x5235
      000141 A4 F3            [ 1]  258 	and	a, #0xf3
      000143 C7 52 35         [ 1]  259 	ld	0x5235, a
                                    260 ;	lib/src/stm8s_uart1.c: 140: UART1->CR3 &= (uint8_t)~(UART1_CR3_CPOL | UART1_CR3_CPHA | UART1_CR3_LBCL); 
      000146 C6 52 36         [ 1]  261 	ld	a, 0x5236
      000149 A4 F8            [ 1]  262 	and	a, #0xf8
      00014B C7 52 36         [ 1]  263 	ld	0x5236, a
                                    264 ;	lib/src/stm8s_uart1.c: 142: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & (uint8_t)(UART1_CR3_CPOL | 
      00014E C6 52 36         [ 1]  265 	ld	a, 0x5236
      000151 6B 11            [ 1]  266 	ld	(0x11, sp), a
      000153 7B 1B            [ 1]  267 	ld	a, (0x1b, sp)
      000155 A4 07            [ 1]  268 	and	a, #0x07
      000157 1A 11            [ 1]  269 	or	a, (0x11, sp)
      000159 C7 52 36         [ 1]  270 	ld	0x5236, a
                                    271 ;	lib/src/stm8s_uart1.c: 138: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      00015C C6 52 35         [ 1]  272 	ld	a, 0x5235
                                    273 ;	lib/src/stm8s_uart1.c: 145: if ((uint8_t)(Mode & UART1_MODE_TX_ENABLE))
      00015F 88               [ 1]  274 	push	a
      000160 7B 1D            [ 1]  275 	ld	a, (0x1d, sp)
      000162 A5 04            [ 1]  276 	bcp	a, #0x04
      000164 84               [ 1]  277 	pop	a
      000165 27 07            [ 1]  278 	jreq	00102$
                                    279 ;	lib/src/stm8s_uart1.c: 148: UART1->CR2 |= (uint8_t)UART1_CR2_TEN;  
      000167 AA 08            [ 1]  280 	or	a, #0x08
      000169 C7 52 35         [ 1]  281 	ld	0x5235, a
      00016C 20 05            [ 2]  282 	jra	00103$
      00016E                        283 00102$:
                                    284 ;	lib/src/stm8s_uart1.c: 153: UART1->CR2 &= (uint8_t)(~UART1_CR2_TEN);  
      00016E A4 F7            [ 1]  285 	and	a, #0xf7
      000170 C7 52 35         [ 1]  286 	ld	0x5235, a
      000173                        287 00103$:
                                    288 ;	lib/src/stm8s_uart1.c: 138: UART1->CR2 &= (uint8_t)~(UART1_CR2_TEN | UART1_CR2_REN); 
      000173 C6 52 35         [ 1]  289 	ld	a, 0x5235
                                    290 ;	lib/src/stm8s_uart1.c: 155: if ((uint8_t)(Mode & UART1_MODE_RX_ENABLE))
      000176 88               [ 1]  291 	push	a
      000177 7B 1D            [ 1]  292 	ld	a, (0x1d, sp)
      000179 A5 08            [ 1]  293 	bcp	a, #0x08
      00017B 84               [ 1]  294 	pop	a
      00017C 27 07            [ 1]  295 	jreq	00105$
                                    296 ;	lib/src/stm8s_uart1.c: 158: UART1->CR2 |= (uint8_t)UART1_CR2_REN;  
      00017E AA 04            [ 1]  297 	or	a, #0x04
      000180 C7 52 35         [ 1]  298 	ld	0x5235, a
      000183 20 05            [ 2]  299 	jra	00106$
      000185                        300 00105$:
                                    301 ;	lib/src/stm8s_uart1.c: 163: UART1->CR2 &= (uint8_t)(~UART1_CR2_REN);  
      000185 A4 FB            [ 1]  302 	and	a, #0xfb
      000187 C7 52 35         [ 1]  303 	ld	0x5235, a
      00018A                        304 00106$:
                                    305 ;	lib/src/stm8s_uart1.c: 111: UART1->CR3 &= (uint8_t)(~UART1_CR3_STOP);  
      00018A C6 52 36         [ 1]  306 	ld	a, 0x5236
                                    307 ;	lib/src/stm8s_uart1.c: 167: if ((uint8_t)(SyncMode & UART1_SYNCMODE_CLOCK_DISABLE))
      00018D 0D 1B            [ 1]  308 	tnz	(0x1b, sp)
      00018F 2A 07            [ 1]  309 	jrpl	00108$
                                    310 ;	lib/src/stm8s_uart1.c: 170: UART1->CR3 &= (uint8_t)(~UART1_CR3_CKEN); 
      000191 A4 F7            [ 1]  311 	and	a, #0xf7
      000193 C7 52 36         [ 1]  312 	ld	0x5236, a
      000196 20 0D            [ 2]  313 	jra	00110$
      000198                        314 00108$:
                                    315 ;	lib/src/stm8s_uart1.c: 174: UART1->CR3 |= (uint8_t)((uint8_t)SyncMode & UART1_CR3_CKEN);
      000198 88               [ 1]  316 	push	a
      000199 7B 1C            [ 1]  317 	ld	a, (0x1c, sp)
      00019B A4 08            [ 1]  318 	and	a, #0x08
      00019D 6B 12            [ 1]  319 	ld	(0x12, sp), a
      00019F 84               [ 1]  320 	pop	a
      0001A0 1A 11            [ 1]  321 	or	a, (0x11, sp)
      0001A2 C7 52 36         [ 1]  322 	ld	0x5236, a
      0001A5                        323 00110$:
                                    324 ;	lib/src/stm8s_uart1.c: 176: }
      0001A5 1E 12            [ 2]  325 	ldw	x, (18, sp)
      0001A7 5B 1C            [ 2]  326 	addw	sp, #28
      0001A9 FC               [ 2]  327 	jp	(x)
                                    328 ;	lib/src/stm8s_uart1.c: 184: void UART1_Cmd(FunctionalState NewState)
                                    329 ;	-----------------------------------------
                                    330 ;	 function UART1_Cmd
                                    331 ;	-----------------------------------------
      0001AA                        332 _UART1_Cmd:
      0001AA 88               [ 1]  333 	push	a
      0001AB 6B 01            [ 1]  334 	ld	(0x01, sp), a
                                    335 ;	lib/src/stm8s_uart1.c: 189: UART1->CR1 &= (uint8_t)(~UART1_CR1_UARTD); 
      0001AD C6 52 34         [ 1]  336 	ld	a, 0x5234
                                    337 ;	lib/src/stm8s_uart1.c: 186: if (NewState != DISABLE)
      0001B0 0D 01            [ 1]  338 	tnz	(0x01, sp)
      0001B2 27 07            [ 1]  339 	jreq	00102$
                                    340 ;	lib/src/stm8s_uart1.c: 189: UART1->CR1 &= (uint8_t)(~UART1_CR1_UARTD); 
      0001B4 A4 DF            [ 1]  341 	and	a, #0xdf
      0001B6 C7 52 34         [ 1]  342 	ld	0x5234, a
      0001B9 20 05            [ 2]  343 	jra	00104$
      0001BB                        344 00102$:
                                    345 ;	lib/src/stm8s_uart1.c: 194: UART1->CR1 |= UART1_CR1_UARTD;  
      0001BB AA 20            [ 1]  346 	or	a, #0x20
      0001BD C7 52 34         [ 1]  347 	ld	0x5234, a
      0001C0                        348 00104$:
                                    349 ;	lib/src/stm8s_uart1.c: 196: }
      0001C0 84               [ 1]  350 	pop	a
      0001C1 81               [ 4]  351 	ret
                                    352 ;	lib/src/stm8s_uart1.c: 211: void UART1_ITConfig(UART1_IT_TypeDef UART1_IT, FunctionalState NewState)
                                    353 ;	-----------------------------------------
                                    354 ;	 function UART1_ITConfig
                                    355 ;	-----------------------------------------
      0001C2                        356 _UART1_ITConfig:
      0001C2 52 03            [ 2]  357 	sub	sp, #3
      0001C4 51               [ 1]  358 	exgw	x, y
      0001C5 6B 03            [ 1]  359 	ld	(0x03, sp), a
                                    360 ;	lib/src/stm8s_uart1.c: 220: uartreg = (uint8_t)((uint16_t)UART1_IT >> 0x08);
      0001C7 93               [ 1]  361 	ldw	x, y
                                    362 ;	lib/src/stm8s_uart1.c: 222: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      0001C8 90 9F            [ 1]  363 	ld	a, yl
      0001CA A4 0F            [ 1]  364 	and	a, #0x0f
      0001CC 41               [ 1]  365 	exg	a, xl
      0001CD A6 01            [ 1]  366 	ld	a, #0x01
      0001CF 41               [ 1]  367 	exg	a, xl
      0001D0 4D               [ 1]  368 	tnz	a
      0001D1 27 06            [ 1]  369 	jreq	00144$
      0001D3                        370 00143$:
      0001D3 41               [ 1]  371 	exg	a, xl
      0001D4 48               [ 1]  372 	sll	a
      0001D5 41               [ 1]  373 	exg	a, xl
      0001D6 4A               [ 1]  374 	dec	a
      0001D7 26 FA            [ 1]  375 	jrne	00143$
      0001D9                        376 00144$:
                                    377 ;	lib/src/stm8s_uart1.c: 227: if (uartreg == 0x01)
      0001D9 9E               [ 1]  378 	ld	a, xh
      0001DA 4A               [ 1]  379 	dec	a
      0001DB 26 05            [ 1]  380 	jrne	00146$
      0001DD A6 01            [ 1]  381 	ld	a, #0x01
      0001DF 6B 01            [ 1]  382 	ld	(0x01, sp), a
      0001E1 C5                     383 	.byte 0xc5
      0001E2                        384 00146$:
      0001E2 0F 01            [ 1]  385 	clr	(0x01, sp)
      0001E4                        386 00147$:
                                    387 ;	lib/src/stm8s_uart1.c: 231: else if (uartreg == 0x02)
      0001E4 9E               [ 1]  388 	ld	a, xh
      0001E5 A0 02            [ 1]  389 	sub	a, #0x02
      0001E7 26 04            [ 1]  390 	jrne	00149$
      0001E9 4C               [ 1]  391 	inc	a
      0001EA 95               [ 1]  392 	ld	xh, a
      0001EB 20 02            [ 2]  393 	jra	00150$
      0001ED                        394 00149$:
      0001ED 4F               [ 1]  395 	clr	a
      0001EE 95               [ 1]  396 	ld	xh, a
      0001EF                        397 00150$:
                                    398 ;	lib/src/stm8s_uart1.c: 224: if (NewState != DISABLE)
      0001EF 0D 03            [ 1]  399 	tnz	(0x03, sp)
      0001F1 27 2C            [ 1]  400 	jreq	00114$
                                    401 ;	lib/src/stm8s_uart1.c: 227: if (uartreg == 0x01)
      0001F3 0D 01            [ 1]  402 	tnz	(0x01, sp)
      0001F5 27 0C            [ 1]  403 	jreq	00105$
                                    404 ;	lib/src/stm8s_uart1.c: 229: UART1->CR1 |= itpos;
      0001F7 C6 52 34         [ 1]  405 	ld	a, 0x5234
      0001FA 89               [ 2]  406 	pushw	x
      0001FB 1A 02            [ 1]  407 	or	a, (2, sp)
      0001FD 85               [ 2]  408 	popw	x
      0001FE C7 52 34         [ 1]  409 	ld	0x5234, a
      000201 20 44            [ 2]  410 	jra	00116$
      000203                        411 00105$:
                                    412 ;	lib/src/stm8s_uart1.c: 231: else if (uartreg == 0x02)
      000203 9E               [ 1]  413 	ld	a, xh
      000204 4D               [ 1]  414 	tnz	a
      000205 27 0C            [ 1]  415 	jreq	00102$
                                    416 ;	lib/src/stm8s_uart1.c: 233: UART1->CR2 |= itpos;
      000207 C6 52 35         [ 1]  417 	ld	a, 0x5235
      00020A 89               [ 2]  418 	pushw	x
      00020B 1A 02            [ 1]  419 	or	a, (2, sp)
      00020D 85               [ 2]  420 	popw	x
      00020E C7 52 35         [ 1]  421 	ld	0x5235, a
      000211 20 34            [ 2]  422 	jra	00116$
      000213                        423 00102$:
                                    424 ;	lib/src/stm8s_uart1.c: 237: UART1->CR4 |= itpos;
      000213 C6 52 37         [ 1]  425 	ld	a, 0x5237
      000216 89               [ 2]  426 	pushw	x
      000217 1A 02            [ 1]  427 	or	a, (2, sp)
      000219 85               [ 2]  428 	popw	x
      00021A C7 52 37         [ 1]  429 	ld	0x5237, a
      00021D 20 28            [ 2]  430 	jra	00116$
      00021F                        431 00114$:
                                    432 ;	lib/src/stm8s_uart1.c: 245: UART1->CR1 &= (uint8_t)(~itpos);
      00021F 9F               [ 1]  433 	ld	a, xl
      000220 43               [ 1]  434 	cpl	a
      000221 6B 02            [ 1]  435 	ld	(0x02, sp), a
                                    436 ;	lib/src/stm8s_uart1.c: 243: if (uartreg == 0x01)
      000223 0D 01            [ 1]  437 	tnz	(0x01, sp)
      000225 27 0A            [ 1]  438 	jreq	00111$
                                    439 ;	lib/src/stm8s_uart1.c: 245: UART1->CR1 &= (uint8_t)(~itpos);
      000227 C6 52 34         [ 1]  440 	ld	a, 0x5234
      00022A 14 02            [ 1]  441 	and	a, (0x02, sp)
      00022C C7 52 34         [ 1]  442 	ld	0x5234, a
      00022F 20 16            [ 2]  443 	jra	00116$
      000231                        444 00111$:
                                    445 ;	lib/src/stm8s_uart1.c: 247: else if (uartreg == 0x02)
      000231 9E               [ 1]  446 	ld	a, xh
      000232 4D               [ 1]  447 	tnz	a
      000233 27 0A            [ 1]  448 	jreq	00108$
                                    449 ;	lib/src/stm8s_uart1.c: 249: UART1->CR2 &= (uint8_t)(~itpos);
      000235 C6 52 35         [ 1]  450 	ld	a, 0x5235
      000238 14 02            [ 1]  451 	and	a, (0x02, sp)
      00023A C7 52 35         [ 1]  452 	ld	0x5235, a
      00023D 20 08            [ 2]  453 	jra	00116$
      00023F                        454 00108$:
                                    455 ;	lib/src/stm8s_uart1.c: 253: UART1->CR4 &= (uint8_t)(~itpos);
      00023F C6 52 37         [ 1]  456 	ld	a, 0x5237
      000242 14 02            [ 1]  457 	and	a, (0x02, sp)
      000244 C7 52 37         [ 1]  458 	ld	0x5237, a
      000247                        459 00116$:
                                    460 ;	lib/src/stm8s_uart1.c: 257: }
      000247 5B 03            [ 2]  461 	addw	sp, #3
      000249 81               [ 4]  462 	ret
                                    463 ;	lib/src/stm8s_uart1.c: 265: void UART1_HalfDuplexCmd(FunctionalState NewState)
                                    464 ;	-----------------------------------------
                                    465 ;	 function UART1_HalfDuplexCmd
                                    466 ;	-----------------------------------------
      00024A                        467 _UART1_HalfDuplexCmd:
      00024A 88               [ 1]  468 	push	a
      00024B 6B 01            [ 1]  469 	ld	(0x01, sp), a
                                    470 ;	lib/src/stm8s_uart1.c: 271: UART1->CR5 |= UART1_CR5_HDSEL;  /**< UART1 Half Duplex Enable  */
      00024D C6 52 38         [ 1]  471 	ld	a, 0x5238
                                    472 ;	lib/src/stm8s_uart1.c: 269: if (NewState != DISABLE)
      000250 0D 01            [ 1]  473 	tnz	(0x01, sp)
      000252 27 07            [ 1]  474 	jreq	00102$
                                    475 ;	lib/src/stm8s_uart1.c: 271: UART1->CR5 |= UART1_CR5_HDSEL;  /**< UART1 Half Duplex Enable  */
      000254 AA 08            [ 1]  476 	or	a, #0x08
      000256 C7 52 38         [ 1]  477 	ld	0x5238, a
      000259 20 05            [ 2]  478 	jra	00104$
      00025B                        479 00102$:
                                    480 ;	lib/src/stm8s_uart1.c: 275: UART1->CR5 &= (uint8_t)~UART1_CR5_HDSEL; /**< UART1 Half Duplex Disable */
      00025B A4 F7            [ 1]  481 	and	a, #0xf7
      00025D C7 52 38         [ 1]  482 	ld	0x5238, a
      000260                        483 00104$:
                                    484 ;	lib/src/stm8s_uart1.c: 277: }
      000260 84               [ 1]  485 	pop	a
      000261 81               [ 4]  486 	ret
                                    487 ;	lib/src/stm8s_uart1.c: 285: void UART1_IrDAConfig(UART1_IrDAMode_TypeDef UART1_IrDAMode)
                                    488 ;	-----------------------------------------
                                    489 ;	 function UART1_IrDAConfig
                                    490 ;	-----------------------------------------
      000262                        491 _UART1_IrDAConfig:
      000262 88               [ 1]  492 	push	a
      000263 6B 01            [ 1]  493 	ld	(0x01, sp), a
                                    494 ;	lib/src/stm8s_uart1.c: 291: UART1->CR5 |= UART1_CR5_IRLP;
      000265 C6 52 38         [ 1]  495 	ld	a, 0x5238
                                    496 ;	lib/src/stm8s_uart1.c: 289: if (UART1_IrDAMode != UART1_IRDAMODE_NORMAL)
      000268 0D 01            [ 1]  497 	tnz	(0x01, sp)
      00026A 27 07            [ 1]  498 	jreq	00102$
                                    499 ;	lib/src/stm8s_uart1.c: 291: UART1->CR5 |= UART1_CR5_IRLP;
      00026C AA 04            [ 1]  500 	or	a, #0x04
      00026E C7 52 38         [ 1]  501 	ld	0x5238, a
      000271 20 05            [ 2]  502 	jra	00104$
      000273                        503 00102$:
                                    504 ;	lib/src/stm8s_uart1.c: 295: UART1->CR5 &= ((uint8_t)~UART1_CR5_IRLP);
      000273 A4 FB            [ 1]  505 	and	a, #0xfb
      000275 C7 52 38         [ 1]  506 	ld	0x5238, a
      000278                        507 00104$:
                                    508 ;	lib/src/stm8s_uart1.c: 297: }
      000278 84               [ 1]  509 	pop	a
      000279 81               [ 4]  510 	ret
                                    511 ;	lib/src/stm8s_uart1.c: 305: void UART1_IrDACmd(FunctionalState NewState)
                                    512 ;	-----------------------------------------
                                    513 ;	 function UART1_IrDACmd
                                    514 ;	-----------------------------------------
      00027A                        515 _UART1_IrDACmd:
      00027A 88               [ 1]  516 	push	a
      00027B 6B 01            [ 1]  517 	ld	(0x01, sp), a
                                    518 ;	lib/src/stm8s_uart1.c: 313: UART1->CR5 |= UART1_CR5_IREN;
      00027D C6 52 38         [ 1]  519 	ld	a, 0x5238
                                    520 ;	lib/src/stm8s_uart1.c: 310: if (NewState != DISABLE)
      000280 0D 01            [ 1]  521 	tnz	(0x01, sp)
      000282 27 07            [ 1]  522 	jreq	00102$
                                    523 ;	lib/src/stm8s_uart1.c: 313: UART1->CR5 |= UART1_CR5_IREN;
      000284 AA 02            [ 1]  524 	or	a, #0x02
      000286 C7 52 38         [ 1]  525 	ld	0x5238, a
      000289 20 05            [ 2]  526 	jra	00104$
      00028B                        527 00102$:
                                    528 ;	lib/src/stm8s_uart1.c: 318: UART1->CR5 &= ((uint8_t)~UART1_CR5_IREN);
      00028B A4 FD            [ 1]  529 	and	a, #0xfd
      00028D C7 52 38         [ 1]  530 	ld	0x5238, a
      000290                        531 00104$:
                                    532 ;	lib/src/stm8s_uart1.c: 320: }
      000290 84               [ 1]  533 	pop	a
      000291 81               [ 4]  534 	ret
                                    535 ;	lib/src/stm8s_uart1.c: 329: void UART1_LINBreakDetectionConfig(UART1_LINBreakDetectionLength_TypeDef UART1_LINBreakDetectionLength)
                                    536 ;	-----------------------------------------
                                    537 ;	 function UART1_LINBreakDetectionConfig
                                    538 ;	-----------------------------------------
      000292                        539 _UART1_LINBreakDetectionConfig:
      000292 88               [ 1]  540 	push	a
      000293 6B 01            [ 1]  541 	ld	(0x01, sp), a
                                    542 ;	lib/src/stm8s_uart1.c: 335: UART1->CR4 |= UART1_CR4_LBDL;
      000295 C6 52 37         [ 1]  543 	ld	a, 0x5237
                                    544 ;	lib/src/stm8s_uart1.c: 333: if (UART1_LINBreakDetectionLength != UART1_LINBREAKDETECTIONLENGTH_10BITS)
      000298 0D 01            [ 1]  545 	tnz	(0x01, sp)
      00029A 27 07            [ 1]  546 	jreq	00102$
                                    547 ;	lib/src/stm8s_uart1.c: 335: UART1->CR4 |= UART1_CR4_LBDL;
      00029C AA 20            [ 1]  548 	or	a, #0x20
      00029E C7 52 37         [ 1]  549 	ld	0x5237, a
      0002A1 20 05            [ 2]  550 	jra	00104$
      0002A3                        551 00102$:
                                    552 ;	lib/src/stm8s_uart1.c: 339: UART1->CR4 &= ((uint8_t)~UART1_CR4_LBDL);
      0002A3 A4 DF            [ 1]  553 	and	a, #0xdf
      0002A5 C7 52 37         [ 1]  554 	ld	0x5237, a
      0002A8                        555 00104$:
                                    556 ;	lib/src/stm8s_uart1.c: 341: }
      0002A8 84               [ 1]  557 	pop	a
      0002A9 81               [ 4]  558 	ret
                                    559 ;	lib/src/stm8s_uart1.c: 349: void UART1_LINCmd(FunctionalState NewState)
                                    560 ;	-----------------------------------------
                                    561 ;	 function UART1_LINCmd
                                    562 ;	-----------------------------------------
      0002AA                        563 _UART1_LINCmd:
      0002AA 88               [ 1]  564 	push	a
      0002AB 6B 01            [ 1]  565 	ld	(0x01, sp), a
                                    566 ;	lib/src/stm8s_uart1.c: 356: UART1->CR3 |= UART1_CR3_LINEN;
      0002AD C6 52 36         [ 1]  567 	ld	a, 0x5236
                                    568 ;	lib/src/stm8s_uart1.c: 353: if (NewState != DISABLE)
      0002B0 0D 01            [ 1]  569 	tnz	(0x01, sp)
      0002B2 27 07            [ 1]  570 	jreq	00102$
                                    571 ;	lib/src/stm8s_uart1.c: 356: UART1->CR3 |= UART1_CR3_LINEN;
      0002B4 AA 40            [ 1]  572 	or	a, #0x40
      0002B6 C7 52 36         [ 1]  573 	ld	0x5236, a
      0002B9 20 05            [ 2]  574 	jra	00104$
      0002BB                        575 00102$:
                                    576 ;	lib/src/stm8s_uart1.c: 361: UART1->CR3 &= ((uint8_t)~UART1_CR3_LINEN);
      0002BB A4 BF            [ 1]  577 	and	a, #0xbf
      0002BD C7 52 36         [ 1]  578 	ld	0x5236, a
      0002C0                        579 00104$:
                                    580 ;	lib/src/stm8s_uart1.c: 363: }
      0002C0 84               [ 1]  581 	pop	a
      0002C1 81               [ 4]  582 	ret
                                    583 ;	lib/src/stm8s_uart1.c: 371: void UART1_SmartCardCmd(FunctionalState NewState)
                                    584 ;	-----------------------------------------
                                    585 ;	 function UART1_SmartCardCmd
                                    586 ;	-----------------------------------------
      0002C2                        587 _UART1_SmartCardCmd:
      0002C2 88               [ 1]  588 	push	a
      0002C3 6B 01            [ 1]  589 	ld	(0x01, sp), a
                                    590 ;	lib/src/stm8s_uart1.c: 378: UART1->CR5 |= UART1_CR5_SCEN;
      0002C5 C6 52 38         [ 1]  591 	ld	a, 0x5238
                                    592 ;	lib/src/stm8s_uart1.c: 375: if (NewState != DISABLE)
      0002C8 0D 01            [ 1]  593 	tnz	(0x01, sp)
      0002CA 27 07            [ 1]  594 	jreq	00102$
                                    595 ;	lib/src/stm8s_uart1.c: 378: UART1->CR5 |= UART1_CR5_SCEN;
      0002CC AA 20            [ 1]  596 	or	a, #0x20
      0002CE C7 52 38         [ 1]  597 	ld	0x5238, a
      0002D1 20 05            [ 2]  598 	jra	00104$
      0002D3                        599 00102$:
                                    600 ;	lib/src/stm8s_uart1.c: 383: UART1->CR5 &= ((uint8_t)(~UART1_CR5_SCEN));
      0002D3 A4 DF            [ 1]  601 	and	a, #0xdf
      0002D5 C7 52 38         [ 1]  602 	ld	0x5238, a
      0002D8                        603 00104$:
                                    604 ;	lib/src/stm8s_uart1.c: 385: }
      0002D8 84               [ 1]  605 	pop	a
      0002D9 81               [ 4]  606 	ret
                                    607 ;	lib/src/stm8s_uart1.c: 394: void UART1_SmartCardNACKCmd(FunctionalState NewState)
                                    608 ;	-----------------------------------------
                                    609 ;	 function UART1_SmartCardNACKCmd
                                    610 ;	-----------------------------------------
      0002DA                        611 _UART1_SmartCardNACKCmd:
      0002DA 88               [ 1]  612 	push	a
      0002DB 6B 01            [ 1]  613 	ld	(0x01, sp), a
                                    614 ;	lib/src/stm8s_uart1.c: 401: UART1->CR5 |= UART1_CR5_NACK;
      0002DD C6 52 38         [ 1]  615 	ld	a, 0x5238
                                    616 ;	lib/src/stm8s_uart1.c: 398: if (NewState != DISABLE)
      0002E0 0D 01            [ 1]  617 	tnz	(0x01, sp)
      0002E2 27 07            [ 1]  618 	jreq	00102$
                                    619 ;	lib/src/stm8s_uart1.c: 401: UART1->CR5 |= UART1_CR5_NACK;
      0002E4 AA 10            [ 1]  620 	or	a, #0x10
      0002E6 C7 52 38         [ 1]  621 	ld	0x5238, a
      0002E9 20 05            [ 2]  622 	jra	00104$
      0002EB                        623 00102$:
                                    624 ;	lib/src/stm8s_uart1.c: 406: UART1->CR5 &= ((uint8_t)~(UART1_CR5_NACK));
      0002EB A4 EF            [ 1]  625 	and	a, #0xef
      0002ED C7 52 38         [ 1]  626 	ld	0x5238, a
      0002F0                        627 00104$:
                                    628 ;	lib/src/stm8s_uart1.c: 408: }
      0002F0 84               [ 1]  629 	pop	a
      0002F1 81               [ 4]  630 	ret
                                    631 ;	lib/src/stm8s_uart1.c: 416: void UART1_WakeUpConfig(UART1_WakeUp_TypeDef UART1_WakeUp)
                                    632 ;	-----------------------------------------
                                    633 ;	 function UART1_WakeUpConfig
                                    634 ;	-----------------------------------------
      0002F2                        635 _UART1_WakeUpConfig:
      0002F2 88               [ 1]  636 	push	a
      0002F3 6B 01            [ 1]  637 	ld	(0x01, sp), a
                                    638 ;	lib/src/stm8s_uart1.c: 420: UART1->CR1 &= ((uint8_t)~UART1_CR1_WAKE);
      0002F5 72 17 52 34      [ 1]  639 	bres	0x5234, #3
                                    640 ;	lib/src/stm8s_uart1.c: 421: UART1->CR1 |= (uint8_t)UART1_WakeUp;
      0002F9 C6 52 34         [ 1]  641 	ld	a, 0x5234
      0002FC 1A 01            [ 1]  642 	or	a, (0x01, sp)
      0002FE C7 52 34         [ 1]  643 	ld	0x5234, a
                                    644 ;	lib/src/stm8s_uart1.c: 422: }
      000301 84               [ 1]  645 	pop	a
      000302 81               [ 4]  646 	ret
                                    647 ;	lib/src/stm8s_uart1.c: 430: void UART1_ReceiverWakeUpCmd(FunctionalState NewState)
                                    648 ;	-----------------------------------------
                                    649 ;	 function UART1_ReceiverWakeUpCmd
                                    650 ;	-----------------------------------------
      000303                        651 _UART1_ReceiverWakeUpCmd:
      000303 88               [ 1]  652 	push	a
      000304 6B 01            [ 1]  653 	ld	(0x01, sp), a
                                    654 ;	lib/src/stm8s_uart1.c: 437: UART1->CR2 |= UART1_CR2_RWU;
      000306 C6 52 35         [ 1]  655 	ld	a, 0x5235
                                    656 ;	lib/src/stm8s_uart1.c: 434: if (NewState != DISABLE)
      000309 0D 01            [ 1]  657 	tnz	(0x01, sp)
      00030B 27 07            [ 1]  658 	jreq	00102$
                                    659 ;	lib/src/stm8s_uart1.c: 437: UART1->CR2 |= UART1_CR2_RWU;
      00030D AA 02            [ 1]  660 	or	a, #0x02
      00030F C7 52 35         [ 1]  661 	ld	0x5235, a
      000312 20 05            [ 2]  662 	jra	00104$
      000314                        663 00102$:
                                    664 ;	lib/src/stm8s_uart1.c: 442: UART1->CR2 &= ((uint8_t)~UART1_CR2_RWU);
      000314 A4 FD            [ 1]  665 	and	a, #0xfd
      000316 C7 52 35         [ 1]  666 	ld	0x5235, a
      000319                        667 00104$:
                                    668 ;	lib/src/stm8s_uart1.c: 444: }
      000319 84               [ 1]  669 	pop	a
      00031A 81               [ 4]  670 	ret
                                    671 ;	lib/src/stm8s_uart1.c: 451: uint8_t UART1_ReceiveData8(void)
                                    672 ;	-----------------------------------------
                                    673 ;	 function UART1_ReceiveData8
                                    674 ;	-----------------------------------------
      00031B                        675 _UART1_ReceiveData8:
                                    676 ;	lib/src/stm8s_uart1.c: 453: return ((uint8_t)UART1->DR);
      00031B C6 52 31         [ 1]  677 	ld	a, 0x5231
                                    678 ;	lib/src/stm8s_uart1.c: 454: }
      00031E 81               [ 4]  679 	ret
                                    680 ;	lib/src/stm8s_uart1.c: 461: uint16_t UART1_ReceiveData9(void)
                                    681 ;	-----------------------------------------
                                    682 ;	 function UART1_ReceiveData9
                                    683 ;	-----------------------------------------
      00031F                        684 _UART1_ReceiveData9:
      00031F 52 02            [ 2]  685 	sub	sp, #2
                                    686 ;	lib/src/stm8s_uart1.c: 465: temp = (uint16_t)(((uint16_t)( (uint16_t)UART1->CR1 & (uint16_t)UART1_CR1_R8)) << 1);
      000321 C6 52 34         [ 1]  687 	ld	a, 0x5234
      000324 A4 80            [ 1]  688 	and	a, #0x80
      000326 97               [ 1]  689 	ld	xl, a
      000327 4F               [ 1]  690 	clr	a
      000328 95               [ 1]  691 	ld	xh, a
      000329 58               [ 2]  692 	sllw	x
      00032A 1F 01            [ 2]  693 	ldw	(0x01, sp), x
                                    694 ;	lib/src/stm8s_uart1.c: 466: return (uint16_t)( (((uint16_t) UART1->DR) | temp ) & ((uint16_t)0x01FF));
      00032C C6 52 31         [ 1]  695 	ld	a, 0x5231
      00032F 5F               [ 1]  696 	clrw	x
      000330 1A 02            [ 1]  697 	or	a, (0x02, sp)
      000332 02               [ 1]  698 	rlwa	x
      000333 1A 01            [ 1]  699 	or	a, (0x01, sp)
      000335 A4 01            [ 1]  700 	and	a, #0x01
      000337 95               [ 1]  701 	ld	xh, a
                                    702 ;	lib/src/stm8s_uart1.c: 467: }
      000338 5B 02            [ 2]  703 	addw	sp, #2
      00033A 81               [ 4]  704 	ret
                                    705 ;	lib/src/stm8s_uart1.c: 474: void UART1_SendData8(uint8_t Data)
                                    706 ;	-----------------------------------------
                                    707 ;	 function UART1_SendData8
                                    708 ;	-----------------------------------------
      00033B                        709 _UART1_SendData8:
                                    710 ;	lib/src/stm8s_uart1.c: 477: UART1->DR = Data;
      00033B C7 52 31         [ 1]  711 	ld	0x5231, a
                                    712 ;	lib/src/stm8s_uart1.c: 478: }
      00033E 81               [ 4]  713 	ret
                                    714 ;	lib/src/stm8s_uart1.c: 486: void UART1_SendData9(uint16_t Data)
                                    715 ;	-----------------------------------------
                                    716 ;	 function UART1_SendData9
                                    717 ;	-----------------------------------------
      00033F                        718 _UART1_SendData9:
      00033F 88               [ 1]  719 	push	a
      000340 51               [ 1]  720 	exgw	x, y
                                    721 ;	lib/src/stm8s_uart1.c: 489: UART1->CR1 &= ((uint8_t)~UART1_CR1_T8);
      000341 72 1D 52 34      [ 1]  722 	bres	0x5234, #6
                                    723 ;	lib/src/stm8s_uart1.c: 491: UART1->CR1 |= (uint8_t)(((uint8_t)(Data >> 2)) & UART1_CR1_T8);
      000345 C6 52 34         [ 1]  724 	ld	a, 0x5234
      000348 6B 01            [ 1]  725 	ld	(0x01, sp), a
      00034A 93               [ 1]  726 	ldw	x, y
      00034B 54               [ 2]  727 	srlw	x
      00034C 54               [ 2]  728 	srlw	x
      00034D 9F               [ 1]  729 	ld	a, xl
      00034E A4 40            [ 1]  730 	and	a, #0x40
      000350 1A 01            [ 1]  731 	or	a, (0x01, sp)
      000352 C7 52 34         [ 1]  732 	ld	0x5234, a
                                    733 ;	lib/src/stm8s_uart1.c: 493: UART1->DR   = (uint8_t)(Data);
      000355 90 9F            [ 1]  734 	ld	a, yl
      000357 C7 52 31         [ 1]  735 	ld	0x5231, a
                                    736 ;	lib/src/stm8s_uart1.c: 494: }
      00035A 84               [ 1]  737 	pop	a
      00035B 81               [ 4]  738 	ret
                                    739 ;	lib/src/stm8s_uart1.c: 501: void UART1_SendBreak(void)
                                    740 ;	-----------------------------------------
                                    741 ;	 function UART1_SendBreak
                                    742 ;	-----------------------------------------
      00035C                        743 _UART1_SendBreak:
                                    744 ;	lib/src/stm8s_uart1.c: 503: UART1->CR2 |= UART1_CR2_SBK;
      00035C 72 10 52 35      [ 1]  745 	bset	0x5235, #0
                                    746 ;	lib/src/stm8s_uart1.c: 504: }
      000360 81               [ 4]  747 	ret
                                    748 ;	lib/src/stm8s_uart1.c: 511: void UART1_SetAddress(uint8_t UART1_Address)
                                    749 ;	-----------------------------------------
                                    750 ;	 function UART1_SetAddress
                                    751 ;	-----------------------------------------
      000361                        752 _UART1_SetAddress:
      000361 88               [ 1]  753 	push	a
      000362 6B 01            [ 1]  754 	ld	(0x01, sp), a
                                    755 ;	lib/src/stm8s_uart1.c: 517: UART1->CR4 &= ((uint8_t)~UART1_CR4_ADD);
      000364 C6 52 37         [ 1]  756 	ld	a, 0x5237
      000367 A4 F0            [ 1]  757 	and	a, #0xf0
      000369 C7 52 37         [ 1]  758 	ld	0x5237, a
                                    759 ;	lib/src/stm8s_uart1.c: 519: UART1->CR4 |= UART1_Address;
      00036C C6 52 37         [ 1]  760 	ld	a, 0x5237
      00036F 1A 01            [ 1]  761 	or	a, (0x01, sp)
      000371 C7 52 37         [ 1]  762 	ld	0x5237, a
                                    763 ;	lib/src/stm8s_uart1.c: 520: }
      000374 84               [ 1]  764 	pop	a
      000375 81               [ 4]  765 	ret
                                    766 ;	lib/src/stm8s_uart1.c: 528: void UART1_SetGuardTime(uint8_t UART1_GuardTime)
                                    767 ;	-----------------------------------------
                                    768 ;	 function UART1_SetGuardTime
                                    769 ;	-----------------------------------------
      000376                        770 _UART1_SetGuardTime:
                                    771 ;	lib/src/stm8s_uart1.c: 531: UART1->GTR = UART1_GuardTime;
      000376 C7 52 39         [ 1]  772 	ld	0x5239, a
                                    773 ;	lib/src/stm8s_uart1.c: 532: }
      000379 81               [ 4]  774 	ret
                                    775 ;	lib/src/stm8s_uart1.c: 556: void UART1_SetPrescaler(uint8_t UART1_Prescaler)
                                    776 ;	-----------------------------------------
                                    777 ;	 function UART1_SetPrescaler
                                    778 ;	-----------------------------------------
      00037A                        779 _UART1_SetPrescaler:
                                    780 ;	lib/src/stm8s_uart1.c: 559: UART1->PSCR = UART1_Prescaler;
      00037A C7 52 3A         [ 1]  781 	ld	0x523a, a
                                    782 ;	lib/src/stm8s_uart1.c: 560: }
      00037D 81               [ 4]  783 	ret
                                    784 ;	lib/src/stm8s_uart1.c: 568: FlagStatus UART1_GetFlagStatus(UART1_Flag_TypeDef UART1_FLAG)
                                    785 ;	-----------------------------------------
                                    786 ;	 function UART1_GetFlagStatus
                                    787 ;	-----------------------------------------
      00037E                        788 _UART1_GetFlagStatus:
      00037E 52 03            [ 2]  789 	sub	sp, #3
                                    790 ;	lib/src/stm8s_uart1.c: 577: if (UART1_FLAG == UART1_FLAG_LBDF)
      000380 1F 01            [ 2]  791 	ldw	(0x01, sp), x
                                    792 ;	lib/src/stm8s_uart1.c: 579: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      000382 41               [ 1]  793 	exg	a, xl
      000383 6B 03            [ 1]  794 	ld	(0x03, sp), a
      000385 41               [ 1]  795 	exg	a, xl
                                    796 ;	lib/src/stm8s_uart1.c: 577: if (UART1_FLAG == UART1_FLAG_LBDF)
      000386 1E 01            [ 2]  797 	ldw	x, (0x01, sp)
      000388 A3 02 10         [ 2]  798 	cpw	x, #0x0210
      00038B 26 0E            [ 1]  799 	jrne	00114$
                                    800 ;	lib/src/stm8s_uart1.c: 579: if ((UART1->CR4 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      00038D C6 52 37         [ 1]  801 	ld	a, 0x5237
      000390 14 03            [ 1]  802 	and	a, (0x03, sp)
      000392 27 04            [ 1]  803 	jreq	00102$
                                    804 ;	lib/src/stm8s_uart1.c: 582: status = SET;
      000394 A6 01            [ 1]  805 	ld	a, #0x01
      000396 20 23            [ 2]  806 	jra	00115$
      000398                        807 00102$:
                                    808 ;	lib/src/stm8s_uart1.c: 587: status = RESET;
      000398 4F               [ 1]  809 	clr	a
      000399 20 20            [ 2]  810 	jra	00115$
      00039B                        811 00114$:
                                    812 ;	lib/src/stm8s_uart1.c: 590: else if (UART1_FLAG == UART1_FLAG_SBK)
      00039B 1E 01            [ 2]  813 	ldw	x, (0x01, sp)
      00039D A3 01 01         [ 2]  814 	cpw	x, #0x0101
      0003A0 26 0E            [ 1]  815 	jrne	00111$
                                    816 ;	lib/src/stm8s_uart1.c: 592: if ((UART1->CR2 & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      0003A2 C6 52 35         [ 1]  817 	ld	a, 0x5235
      0003A5 14 03            [ 1]  818 	and	a, (0x03, sp)
      0003A7 27 04            [ 1]  819 	jreq	00105$
                                    820 ;	lib/src/stm8s_uart1.c: 595: status = SET;
      0003A9 A6 01            [ 1]  821 	ld	a, #0x01
      0003AB 20 0E            [ 2]  822 	jra	00115$
      0003AD                        823 00105$:
                                    824 ;	lib/src/stm8s_uart1.c: 600: status = RESET;
      0003AD 4F               [ 1]  825 	clr	a
      0003AE 20 0B            [ 2]  826 	jra	00115$
      0003B0                        827 00111$:
                                    828 ;	lib/src/stm8s_uart1.c: 605: if ((UART1->SR & (uint8_t)UART1_FLAG) != (uint8_t)0x00)
      0003B0 C6 52 30         [ 1]  829 	ld	a, 0x5230
      0003B3 14 03            [ 1]  830 	and	a, (0x03, sp)
      0003B5 27 03            [ 1]  831 	jreq	00108$
                                    832 ;	lib/src/stm8s_uart1.c: 608: status = SET;
      0003B7 A6 01            [ 1]  833 	ld	a, #0x01
                                    834 ;	lib/src/stm8s_uart1.c: 613: status = RESET;
      0003B9 21                     835 	.byte 0x21
      0003BA                        836 00108$:
      0003BA 4F               [ 1]  837 	clr	a
      0003BB                        838 00115$:
                                    839 ;	lib/src/stm8s_uart1.c: 617: return status;
                                    840 ;	lib/src/stm8s_uart1.c: 618: }
      0003BB 5B 03            [ 2]  841 	addw	sp, #3
      0003BD 81               [ 4]  842 	ret
                                    843 ;	lib/src/stm8s_uart1.c: 646: void UART1_ClearFlag(UART1_Flag_TypeDef UART1_FLAG)
                                    844 ;	-----------------------------------------
                                    845 ;	 function UART1_ClearFlag
                                    846 ;	-----------------------------------------
      0003BE                        847 _UART1_ClearFlag:
                                    848 ;	lib/src/stm8s_uart1.c: 651: if (UART1_FLAG == UART1_FLAG_RXNE)
      0003BE A3 00 20         [ 2]  849 	cpw	x, #0x0020
      0003C1 26 05            [ 1]  850 	jrne	00102$
                                    851 ;	lib/src/stm8s_uart1.c: 653: UART1->SR = (uint8_t)~(UART1_SR_RXNE);
      0003C3 35 DF 52 30      [ 1]  852 	mov	0x5230+0, #0xdf
      0003C7 81               [ 4]  853 	ret
      0003C8                        854 00102$:
                                    855 ;	lib/src/stm8s_uart1.c: 658: UART1->CR4 &= (uint8_t)~(UART1_CR4_LBDF);
      0003C8 72 19 52 37      [ 1]  856 	bres	0x5237, #4
                                    857 ;	lib/src/stm8s_uart1.c: 660: }
      0003CC 81               [ 4]  858 	ret
                                    859 ;	lib/src/stm8s_uart1.c: 675: ITStatus UART1_GetITStatus(UART1_IT_TypeDef UART1_IT)
                                    860 ;	-----------------------------------------
                                    861 ;	 function UART1_GetITStatus
                                    862 ;	-----------------------------------------
      0003CD                        863 _UART1_GetITStatus:
      0003CD 52 04            [ 2]  864 	sub	sp, #4
                                    865 ;	lib/src/stm8s_uart1.c: 687: itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART1_IT & (uint8_t)0x0F));
      0003CF 90 93            [ 1]  866 	ldw	y, x
      0003D1 9F               [ 1]  867 	ld	a, xl
      0003D2 A4 0F            [ 1]  868 	and	a, #0x0f
      0003D4 88               [ 1]  869 	push	a
      0003D5 A6 01            [ 1]  870 	ld	a, #0x01
      0003D7 6B 02            [ 1]  871 	ld	(0x02, sp), a
      0003D9 84               [ 1]  872 	pop	a
      0003DA 4D               [ 1]  873 	tnz	a
      0003DB 27 05            [ 1]  874 	jreq	00162$
      0003DD                        875 00161$:
      0003DD 08 01            [ 1]  876 	sll	(0x01, sp)
      0003DF 4A               [ 1]  877 	dec	a
      0003E0 26 FB            [ 1]  878 	jrne	00161$
      0003E2                        879 00162$:
                                    880 ;	lib/src/stm8s_uart1.c: 689: itmask1 = (uint8_t)((uint8_t)UART1_IT >> (uint8_t)4);
      0003E2 9F               [ 1]  881 	ld	a, xl
      0003E3 4E               [ 1]  882 	swap	a
      0003E4 A4 0F            [ 1]  883 	and	a, #0x0f
                                    884 ;	lib/src/stm8s_uart1.c: 691: itmask2 = (uint8_t)((uint8_t)1 << itmask1);
      0003E6 88               [ 1]  885 	push	a
      0003E7 A6 01            [ 1]  886 	ld	a, #0x01
      0003E9 6B 03            [ 1]  887 	ld	(0x03, sp), a
      0003EB 84               [ 1]  888 	pop	a
      0003EC 4D               [ 1]  889 	tnz	a
      0003ED 27 05            [ 1]  890 	jreq	00164$
      0003EF                        891 00163$:
      0003EF 08 02            [ 1]  892 	sll	(0x02, sp)
      0003F1 4A               [ 1]  893 	dec	a
      0003F2 26 FB            [ 1]  894 	jrne	00163$
      0003F4                        895 00164$:
                                    896 ;	lib/src/stm8s_uart1.c: 695: if (UART1_IT == UART1_IT_PE)
      0003F4 17 03            [ 2]  897 	ldw	(0x03, sp), y
      0003F6 93               [ 1]  898 	ldw	x, y
      0003F7 A3 01 00         [ 2]  899 	cpw	x, #0x0100
      0003FA 26 18            [ 1]  900 	jrne	00117$
                                    901 ;	lib/src/stm8s_uart1.c: 698: enablestatus = (uint8_t)((uint8_t)UART1->CR1 & itmask2);
      0003FC C6 52 34         [ 1]  902 	ld	a, 0x5234
      0003FF 14 02            [ 1]  903 	and	a, (0x02, sp)
      000401 97               [ 1]  904 	ld	xl, a
                                    905 ;	lib/src/stm8s_uart1.c: 701: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      000402 C6 52 30         [ 1]  906 	ld	a, 0x5230
      000405 14 01            [ 1]  907 	and	a, (0x01, sp)
      000407 27 08            [ 1]  908 	jreq	00102$
      000409 9F               [ 1]  909 	ld	a, xl
      00040A 4D               [ 1]  910 	tnz	a
      00040B 27 04            [ 1]  911 	jreq	00102$
                                    912 ;	lib/src/stm8s_uart1.c: 704: pendingbitstatus = SET;
      00040D A6 01            [ 1]  913 	ld	a, #0x01
      00040F 20 37            [ 2]  914 	jra	00118$
      000411                        915 00102$:
                                    916 ;	lib/src/stm8s_uart1.c: 709: pendingbitstatus = RESET;
      000411 4F               [ 1]  917 	clr	a
      000412 20 34            [ 2]  918 	jra	00118$
      000414                        919 00117$:
                                    920 ;	lib/src/stm8s_uart1.c: 713: else if (UART1_IT == UART1_IT_LBDF)
      000414 1E 03            [ 2]  921 	ldw	x, (0x03, sp)
      000416 A3 03 46         [ 2]  922 	cpw	x, #0x0346
      000419 26 18            [ 1]  923 	jrne	00114$
                                    924 ;	lib/src/stm8s_uart1.c: 716: enablestatus = (uint8_t)((uint8_t)UART1->CR4 & itmask2);
      00041B C6 52 37         [ 1]  925 	ld	a, 0x5237
      00041E 14 02            [ 1]  926 	and	a, (0x02, sp)
      000420 97               [ 1]  927 	ld	xl, a
                                    928 ;	lib/src/stm8s_uart1.c: 718: if (((UART1->CR4 & itpos) != (uint8_t)0x00) && enablestatus)
      000421 C6 52 37         [ 1]  929 	ld	a, 0x5237
      000424 14 01            [ 1]  930 	and	a, (0x01, sp)
      000426 27 08            [ 1]  931 	jreq	00106$
      000428 9F               [ 1]  932 	ld	a, xl
      000429 4D               [ 1]  933 	tnz	a
      00042A 27 04            [ 1]  934 	jreq	00106$
                                    935 ;	lib/src/stm8s_uart1.c: 721: pendingbitstatus = SET;
      00042C A6 01            [ 1]  936 	ld	a, #0x01
      00042E 20 18            [ 2]  937 	jra	00118$
      000430                        938 00106$:
                                    939 ;	lib/src/stm8s_uart1.c: 726: pendingbitstatus = RESET;
      000430 4F               [ 1]  940 	clr	a
      000431 20 15            [ 2]  941 	jra	00118$
      000433                        942 00114$:
                                    943 ;	lib/src/stm8s_uart1.c: 732: enablestatus = (uint8_t)((uint8_t)UART1->CR2 & itmask2);
      000433 C6 52 35         [ 1]  944 	ld	a, 0x5235
      000436 14 02            [ 1]  945 	and	a, (0x02, sp)
      000438 97               [ 1]  946 	ld	xl, a
                                    947 ;	lib/src/stm8s_uart1.c: 734: if (((UART1->SR & itpos) != (uint8_t)0x00) && enablestatus)
      000439 C6 52 30         [ 1]  948 	ld	a, 0x5230
      00043C 14 01            [ 1]  949 	and	a, (0x01, sp)
      00043E 27 07            [ 1]  950 	jreq	00110$
      000440 9F               [ 1]  951 	ld	a, xl
      000441 4D               [ 1]  952 	tnz	a
      000442 27 03            [ 1]  953 	jreq	00110$
                                    954 ;	lib/src/stm8s_uart1.c: 737: pendingbitstatus = SET;
      000444 A6 01            [ 1]  955 	ld	a, #0x01
                                    956 ;	lib/src/stm8s_uart1.c: 742: pendingbitstatus = RESET;
      000446 21                     957 	.byte 0x21
      000447                        958 00110$:
      000447 4F               [ 1]  959 	clr	a
      000448                        960 00118$:
                                    961 ;	lib/src/stm8s_uart1.c: 747: return  pendingbitstatus;
                                    962 ;	lib/src/stm8s_uart1.c: 748: }
      000448 5B 04            [ 2]  963 	addw	sp, #4
      00044A 81               [ 4]  964 	ret
                                    965 ;	lib/src/stm8s_uart1.c: 775: void UART1_ClearITPendingBit(UART1_IT_TypeDef UART1_IT)
                                    966 ;	-----------------------------------------
                                    967 ;	 function UART1_ClearITPendingBit
                                    968 ;	-----------------------------------------
      00044B                        969 _UART1_ClearITPendingBit:
                                    970 ;	lib/src/stm8s_uart1.c: 780: if (UART1_IT == UART1_IT_RXNE)
      00044B A3 02 55         [ 2]  971 	cpw	x, #0x0255
      00044E 26 05            [ 1]  972 	jrne	00102$
                                    973 ;	lib/src/stm8s_uart1.c: 782: UART1->SR = (uint8_t)~(UART1_SR_RXNE);
      000450 35 DF 52 30      [ 1]  974 	mov	0x5230+0, #0xdf
      000454 81               [ 4]  975 	ret
      000455                        976 00102$:
                                    977 ;	lib/src/stm8s_uart1.c: 787: UART1->CR4 &= (uint8_t)~(UART1_CR4_LBDF);
      000455 72 19 52 37      [ 1]  978 	bres	0x5237, #4
                                    979 ;	lib/src/stm8s_uart1.c: 789: }
      000459 81               [ 4]  980 	ret
                                    981 	.area CODE
                                    982 	.area CONST
                                    983 	.area INITIALIZER
                                    984 	.area CABS (ABS)
