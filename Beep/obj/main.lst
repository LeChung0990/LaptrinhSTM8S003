                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 ;--------------------------------------------------------
                                     13 ; ram data
                                     14 ;--------------------------------------------------------
                                     15 	.area DATA
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area INITIALIZED
                                     20 ;--------------------------------------------------------
                                     21 ; Stack segment in internal ram
                                     22 ;--------------------------------------------------------
                                     23 	.area SSEG
      000000                         24 __start__stack:
      000000                         25 	.ds	1
                                     26 
                                     27 ;--------------------------------------------------------
                                     28 ; absolute external ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area DABS (ABS)
                                     31 
                                     32 ; default segment ordering for linker
                                     33 	.area HOME
                                     34 	.area GSINIT
                                     35 	.area GSFINAL
                                     36 	.area CONST
                                     37 	.area INITIALIZER
                                     38 	.area CODE
                                     39 
                                     40 ;--------------------------------------------------------
                                     41 ; interrupt vector
                                     42 ;--------------------------------------------------------
                                     43 	.area HOME
      000000                         44 __interrupt_vect:
      000000 82v00u00u00             45 	int s_GSINIT ; reset
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area GSINIT
      000000 CDr00r00         [ 4]   53 	call	___sdcc_external_startup
      000003 4D               [ 1]   54 	tnz	a
      000004 27 03            [ 1]   55 	jreq	__sdcc_init_data
      000006 CCr00r04         [ 2]   56 	jp	__sdcc_program_startup
      000009                         57 __sdcc_init_data:
                                     58 ; stm8_genXINIT() start
      000009 AEr00r00         [ 2]   59 	ldw x, #l_DATA
      00000C 27 07            [ 1]   60 	jreq	00002$
      00000E                         61 00001$:
      00000E 72 4FuFFuFF      [ 1]   62 	clr (s_DATA - 1, x)
      000012 5A               [ 2]   63 	decw x
      000013 26 F9            [ 1]   64 	jrne	00001$
      000015                         65 00002$:
      000015 AEr00r00         [ 2]   66 	ldw	x, #l_INITIALIZER
      000018 27 09            [ 1]   67 	jreq	00004$
      00001A                         68 00003$:
      00001A D6uFFuFF         [ 1]   69 	ld	a, (s_INITIALIZER - 1, x)
      00001D D7uFFuFF         [ 1]   70 	ld	(s_INITIALIZED - 1, x), a
      000020 5A               [ 2]   71 	decw	x
      000021 26 F7            [ 1]   72 	jrne	00003$
      000023                         73 00004$:
                                     74 ; stm8_genXINIT() end
                                     75 	.area GSFINAL
      000000 CCr00r04         [ 2]   76 	jp	__sdcc_program_startup
                                     77 ;--------------------------------------------------------
                                     78 ; Home
                                     79 ;--------------------------------------------------------
                                     80 	.area HOME
                                     81 	.area HOME
      000004                         82 __sdcc_program_startup:
      000004 CCr00r00         [ 2]   83 	jp	_main
                                     84 ;	return from main will return to caller
                                     85 ;--------------------------------------------------------
                                     86 ; code
                                     87 ;--------------------------------------------------------
                                     88 	.area CODE
                                     89 ;	main.c: 5: void main (void)
                                     90 ;	-----------------------------------------
                                     91 ;	 function main
                                     92 ;	-----------------------------------------
      000000                         93 _main:
                                     94 ;	main.c: 9: CLK->CKDIVR &= (uint8_t)(~CLK_CKDIVR_HSIDIV);
      000000 C6 50 C6         [ 1]   95 	ld	a, 0x50c6
      000003 A4 E7            [ 1]   96 	and	a, #0xe7
      000005 C7 50 C6         [ 1]   97 	ld	0x50c6, a
                                     98 ;	main.c: 10: CLK->CKDIVR |= (uint8_t)0x00;
      000008 55 50 C6 50 C6   [ 1]   99 	mov	0x50c6, 0x50c6
                                    100 ;	main.c: 12: BEEP->CSR = BEEP_CSR_RESET_VALUE;
      00000D 35 1F 50 F3      [ 1]  101 	mov	0x50f3+0, #0x1f
                                    102 ;	main.c: 14: if ((BEEP->CSR & BEEP_CSR_BEEPDIV) == BEEP_CSR_BEEPDIV)
      000011 C6 50 F3         [ 1]  103 	ld	a, 0x50f3
      000014 43               [ 1]  104 	cpl	a
      000015 A5 1F            [ 1]  105 	bcp	a, #0x1f
      000017 26 10            [ 1]  106 	jrne	00102$
                                    107 ;	main.c: 16: BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPDIV); /* Clear bits */
      000019 C6 50 F3         [ 1]  108 	ld	a, 0x50f3
      00001C A4 E0            [ 1]  109 	and	a, #0xe0
      00001E C7 50 F3         [ 1]  110 	ld	0x50f3, a
                                    111 ;	main.c: 17: BEEP->CSR |= 0x0B;
      000021 C6 50 F3         [ 1]  112 	ld	a, 0x50f3
      000024 AA 0B            [ 1]  113 	or	a, #0x0b
      000026 C7 50 F3         [ 1]  114 	ld	0x50f3, a
      000029                        115 00102$:
                                    116 ;	main.c: 19: BEEP->CSR &= (uint8_t)(~BEEP_CSR_BEEPSEL);
      000029 C6 50 F3         [ 1]  117 	ld	a, 0x50f3
      00002C A4 3F            [ 1]  118 	and	a, #0x3f
      00002E C7 50 F3         [ 1]  119 	ld	0x50f3, a
                                    120 ;	main.c: 20: BEEP->CSR |= (uint8_t)(0x40);
      000031 72 1C 50 F3      [ 1]  121 	bset	0x50f3, #6
                                    122 ;	main.c: 23: BEEP->CSR |= BEEP_CSR_BEEPEN;
      000035 72 1A 50 F3      [ 1]  123 	bset	0x50f3, #5
                                    124 ;	main.c: 25: while (1)
      000039                        125 00104$:
      000039 20 FE            [ 2]  126 	jra	00104$
                                    127 ;	main.c: 29: }
      00003B 81               [ 4]  128 	ret
                                    129 	.area CODE
                                    130 	.area CONST
                                    131 	.area INITIALIZER
                                    132 	.area CABS (ABS)
