                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.0 #14184 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_i2c
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _I2C_DeInit
                                     12 	.globl _I2C_Init
                                     13 	.globl _I2C_Cmd
                                     14 	.globl _I2C_GeneralCallCmd
                                     15 	.globl _I2C_GenerateSTART
                                     16 	.globl _I2C_GenerateSTOP
                                     17 	.globl _I2C_SoftwareResetCmd
                                     18 	.globl _I2C_StretchClockCmd
                                     19 	.globl _I2C_AcknowledgeConfig
                                     20 	.globl _I2C_ITConfig
                                     21 	.globl _I2C_FastModeDutyCycleConfig
                                     22 	.globl _I2C_ReceiveData
                                     23 	.globl _I2C_Send7bitAddress
                                     24 	.globl _I2C_SendData
                                     25 	.globl _I2C_CheckEvent
                                     26 	.globl _I2C_GetLastEvent
                                     27 	.globl _I2C_GetFlagStatus
                                     28 	.globl _I2C_ClearFlag
                                     29 	.globl _I2C_GetITStatus
                                     30 	.globl _I2C_ClearITPendingBit
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DATA
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area INITIALIZED
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area DABS (ABS)
                                     43 
                                     44 ; default segment ordering for linker
                                     45 	.area HOME
                                     46 	.area GSINIT
                                     47 	.area GSFINAL
                                     48 	.area CONST
                                     49 	.area INITIALIZER
                                     50 	.area CODE
                                     51 
                                     52 ;--------------------------------------------------------
                                     53 ; global & static initialisations
                                     54 ;--------------------------------------------------------
                                     55 	.area HOME
                                     56 	.area GSINIT
                                     57 	.area GSFINAL
                                     58 	.area GSINIT
                                     59 ;--------------------------------------------------------
                                     60 ; Home
                                     61 ;--------------------------------------------------------
                                     62 	.area HOME
                                     63 	.area HOME
                                     64 ;--------------------------------------------------------
                                     65 ; code
                                     66 ;--------------------------------------------------------
                                     67 	.area CODE
                                     68 ;	lib/src/stm8s_i2c.c: 67: void I2C_DeInit(void)
                                     69 ;	-----------------------------------------
                                     70 ;	 function I2C_DeInit
                                     71 ;	-----------------------------------------
      000000                         72 _I2C_DeInit:
                                     73 ;	lib/src/stm8s_i2c.c: 69: I2C->CR1 = I2C_CR1_RESET_VALUE;
      000000 35 00 52 10      [ 1]   74 	mov	0x5210+0, #0x00
                                     75 ;	lib/src/stm8s_i2c.c: 70: I2C->CR2 = I2C_CR2_RESET_VALUE;
      000004 35 00 52 11      [ 1]   76 	mov	0x5211+0, #0x00
                                     77 ;	lib/src/stm8s_i2c.c: 71: I2C->FREQR = I2C_FREQR_RESET_VALUE;
      000008 35 00 52 12      [ 1]   78 	mov	0x5212+0, #0x00
                                     79 ;	lib/src/stm8s_i2c.c: 72: I2C->OARL = I2C_OARL_RESET_VALUE;
      00000C 35 00 52 13      [ 1]   80 	mov	0x5213+0, #0x00
                                     81 ;	lib/src/stm8s_i2c.c: 73: I2C->OARH = I2C_OARH_RESET_VALUE;
      000010 35 00 52 14      [ 1]   82 	mov	0x5214+0, #0x00
                                     83 ;	lib/src/stm8s_i2c.c: 74: I2C->ITR = I2C_ITR_RESET_VALUE;
      000014 35 00 52 1A      [ 1]   84 	mov	0x521a+0, #0x00
                                     85 ;	lib/src/stm8s_i2c.c: 75: I2C->CCRL = I2C_CCRL_RESET_VALUE;
      000018 35 00 52 1B      [ 1]   86 	mov	0x521b+0, #0x00
                                     87 ;	lib/src/stm8s_i2c.c: 76: I2C->CCRH = I2C_CCRH_RESET_VALUE;
      00001C 35 00 52 1C      [ 1]   88 	mov	0x521c+0, #0x00
                                     89 ;	lib/src/stm8s_i2c.c: 77: I2C->TRISER = I2C_TRISER_RESET_VALUE;
      000020 35 02 52 1D      [ 1]   90 	mov	0x521d+0, #0x02
                                     91 ;	lib/src/stm8s_i2c.c: 78: }
      000024 81               [ 4]   92 	ret
                                     93 ;	lib/src/stm8s_i2c.c: 96: void I2C_Init(uint32_t OutputClockFrequencyHz, uint16_t OwnAddress, 
                                     94 ;	-----------------------------------------
                                     95 ;	 function I2C_Init
                                     96 ;	-----------------------------------------
      000025                         97 _I2C_Init:
      000025 52 07            [ 2]   98 	sub	sp, #7
                                     99 ;	lib/src/stm8s_i2c.c: 102: uint8_t tmpccrh = 0;
      000027 0F 05            [ 1]  100 	clr	(0x05, sp)
                                    101 ;	lib/src/stm8s_i2c.c: 115: I2C->FREQR &= (uint8_t)(~I2C_FREQR_FREQ);
      000029 C6 52 12         [ 1]  102 	ld	a, 0x5212
      00002C A4 C0            [ 1]  103 	and	a, #0xc0
      00002E C7 52 12         [ 1]  104 	ld	0x5212, a
                                    105 ;	lib/src/stm8s_i2c.c: 117: I2C->FREQR |= InputClockFrequencyMHz;
      000031 C6 52 12         [ 1]  106 	ld	a, 0x5212
      000034 1A 13            [ 1]  107 	or	a, (0x13, sp)
      000036 C7 52 12         [ 1]  108 	ld	0x5212, a
                                    109 ;	lib/src/stm8s_i2c.c: 121: I2C->CR1 &= (uint8_t)(~I2C_CR1_PE);
      000039 72 11 52 10      [ 1]  110 	bres	0x5210, #0
                                    111 ;	lib/src/stm8s_i2c.c: 124: I2C->CCRH &= (uint8_t)(~(I2C_CCRH_FS | I2C_CCRH_DUTY | I2C_CCRH_CCR));
      00003D C6 52 1C         [ 1]  112 	ld	a, 0x521c
      000040 A4 30            [ 1]  113 	and	a, #0x30
      000042 C7 52 1C         [ 1]  114 	ld	0x521c, a
                                    115 ;	lib/src/stm8s_i2c.c: 125: I2C->CCRL &= (uint8_t)(~I2C_CCRL_CCR);
      000045 C6 52 1B         [ 1]  116 	ld	a, 0x521b
      000048 35 00 52 1B      [ 1]  117 	mov	0x521b+0, #0x00
                                    118 ;	lib/src/stm8s_i2c.c: 136: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 3));
      00004C 5F               [ 1]  119 	clrw	x
      00004D 7B 13            [ 1]  120 	ld	a, (0x13, sp)
      00004F 97               [ 1]  121 	ld	xl, a
      000050 90 5F            [ 1]  122 	clrw	y
      000052 89               [ 2]  123 	pushw	x
      000053 90 89            [ 2]  124 	pushw	y
      000055 4B 40            [ 1]  125 	push	#0x40
      000057 4B 42            [ 1]  126 	push	#0x42
      000059 4B 0F            [ 1]  127 	push	#0x0f
      00005B 4B 00            [ 1]  128 	push	#0x00
      00005D CDr00r00         [ 4]  129 	call	__mullong
      000060 5B 08            [ 2]  130 	addw	sp, #8
      000062 1F 03            [ 2]  131 	ldw	(0x03, sp), x
      000064 17 01            [ 2]  132 	ldw	(0x01, sp), y
                                    133 ;	lib/src/stm8s_i2c.c: 128: if (OutputClockFrequencyHz > I2C_MAX_STANDARD_FREQ) /* FAST MODE */
      000066 AE 86 A0         [ 2]  134 	ldw	x, #0x86a0
      000069 13 0C            [ 2]  135 	cpw	x, (0x0c, sp)
      00006B A6 01            [ 1]  136 	ld	a, #0x01
      00006D 12 0B            [ 1]  137 	sbc	a, (0x0b, sp)
      00006F 4F               [ 1]  138 	clr	a
      000070 12 0A            [ 1]  139 	sbc	a, (0x0a, sp)
      000072 24 76            [ 1]  140 	jrnc	00109$
                                    141 ;	lib/src/stm8s_i2c.c: 131: tmpccrh = I2C_CCRH_FS;
      000074 A6 80            [ 1]  142 	ld	a, #0x80
      000076 6B 05            [ 1]  143 	ld	(0x05, sp), a
                                    144 ;	lib/src/stm8s_i2c.c: 133: if (I2C_DutyCycle == I2C_DUTYCYCLE_2)
      000078 0D 10            [ 1]  145 	tnz	(0x10, sp)
      00007A 26 21            [ 1]  146 	jrne	00102$
                                    147 ;	lib/src/stm8s_i2c.c: 136: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 3));
      00007C 1E 0C            [ 2]  148 	ldw	x, (0x0c, sp)
      00007E 89               [ 2]  149 	pushw	x
      00007F 1E 0C            [ 2]  150 	ldw	x, (0x0c, sp)
      000081 89               [ 2]  151 	pushw	x
      000082 4B 03            [ 1]  152 	push	#0x03
      000084 5F               [ 1]  153 	clrw	x
      000085 89               [ 2]  154 	pushw	x
      000086 4B 00            [ 1]  155 	push	#0x00
      000088 CDr00r00         [ 4]  156 	call	__mullong
      00008B 5B 08            [ 2]  157 	addw	sp, #8
      00008D 89               [ 2]  158 	pushw	x
      00008E 90 89            [ 2]  159 	pushw	y
      000090 1E 07            [ 2]  160 	ldw	x, (0x07, sp)
      000092 89               [ 2]  161 	pushw	x
      000093 1E 07            [ 2]  162 	ldw	x, (0x07, sp)
      000095 89               [ 2]  163 	pushw	x
      000096 CDr00r00         [ 4]  164 	call	__divulong
      000099 5B 08            [ 2]  165 	addw	sp, #8
      00009B 20 26            [ 2]  166 	jra	00103$
      00009D                        167 00102$:
                                    168 ;	lib/src/stm8s_i2c.c: 141: result = (uint16_t) ((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz * 25));
      00009D 1E 0C            [ 2]  169 	ldw	x, (0x0c, sp)
      00009F 89               [ 2]  170 	pushw	x
      0000A0 1E 0C            [ 2]  171 	ldw	x, (0x0c, sp)
      0000A2 89               [ 2]  172 	pushw	x
      0000A3 4B 19            [ 1]  173 	push	#0x19
      0000A5 5F               [ 1]  174 	clrw	x
      0000A6 89               [ 2]  175 	pushw	x
      0000A7 4B 00            [ 1]  176 	push	#0x00
      0000A9 CDr00r00         [ 4]  177 	call	__mullong
      0000AC 5B 08            [ 2]  178 	addw	sp, #8
      0000AE 9F               [ 1]  179 	ld	a, xl
      0000AF 88               [ 1]  180 	push	a
      0000B0 9E               [ 1]  181 	ld	a, xh
      0000B1 88               [ 1]  182 	push	a
      0000B2 90 89            [ 2]  183 	pushw	y
      0000B4 1E 07            [ 2]  184 	ldw	x, (0x07, sp)
      0000B6 89               [ 2]  185 	pushw	x
      0000B7 1E 07            [ 2]  186 	ldw	x, (0x07, sp)
      0000B9 89               [ 2]  187 	pushw	x
      0000BA CDr00r00         [ 4]  188 	call	__divulong
      0000BD 5B 08            [ 2]  189 	addw	sp, #8
                                    190 ;	lib/src/stm8s_i2c.c: 143: tmpccrh |= I2C_CCRH_DUTY;
      0000BF A6 C0            [ 1]  191 	ld	a, #0xc0
      0000C1 6B 05            [ 1]  192 	ld	(0x05, sp), a
      0000C3                        193 00103$:
                                    194 ;	lib/src/stm8s_i2c.c: 147: if (result < (uint16_t)0x01)
      0000C3 A3 00 01         [ 2]  195 	cpw	x, #0x0001
      0000C6 24 02            [ 1]  196 	jrnc	00105$
                                    197 ;	lib/src/stm8s_i2c.c: 150: result = (uint16_t)0x0001;
      0000C8 5F               [ 1]  198 	clrw	x
      0000C9 5C               [ 1]  199 	incw	x
      0000CA                        200 00105$:
                                    201 ;	lib/src/stm8s_i2c.c: 156: tmpval = ((InputClockFrequencyMHz * 3) / 10) + 1;
      0000CA 7B 13            [ 1]  202 	ld	a, (0x13, sp)
      0000CC 6B 07            [ 1]  203 	ld	(0x07, sp), a
      0000CE 0F 06            [ 1]  204 	clr	(0x06, sp)
      0000D0 89               [ 2]  205 	pushw	x
      0000D1 1E 08            [ 2]  206 	ldw	x, (0x08, sp)
      0000D3 58               [ 2]  207 	sllw	x
      0000D4 72 FB 08         [ 2]  208 	addw	x, (0x08, sp)
      0000D7 51               [ 1]  209 	exgw	x, y
      0000D8 4B 0A            [ 1]  210 	push	#0x0a
      0000DA 4B 00            [ 1]  211 	push	#0x00
      0000DC 93               [ 1]  212 	ldw	x, y
      0000DD CDr00r00         [ 4]  213 	call	__divsint
      0000E0 90 93            [ 1]  214 	ldw	y, x
      0000E2 9F               [ 1]  215 	ld	a, xl
      0000E3 85               [ 2]  216 	popw	x
      0000E4 4C               [ 1]  217 	inc	a
                                    218 ;	lib/src/stm8s_i2c.c: 157: I2C->TRISER = (uint8_t)tmpval;
      0000E5 C7 52 1D         [ 1]  219 	ld	0x521d, a
      0000E8 20 23            [ 2]  220 	jra	00110$
      0000EA                        221 00109$:
                                    222 ;	lib/src/stm8s_i2c.c: 164: result = (uint16_t)((InputClockFrequencyMHz * 1000000) / (OutputClockFrequencyHz << (uint8_t)1));
      0000EA 1E 0C            [ 2]  223 	ldw	x, (0x0c, sp)
      0000EC 16 0A            [ 2]  224 	ldw	y, (0x0a, sp)
      0000EE 58               [ 2]  225 	sllw	x
      0000EF 90 59            [ 2]  226 	rlcw	y
      0000F1 89               [ 2]  227 	pushw	x
      0000F2 90 89            [ 2]  228 	pushw	y
      0000F4 1E 07            [ 2]  229 	ldw	x, (0x07, sp)
      0000F6 89               [ 2]  230 	pushw	x
      0000F7 1E 07            [ 2]  231 	ldw	x, (0x07, sp)
      0000F9 89               [ 2]  232 	pushw	x
      0000FA CDr00r00         [ 4]  233 	call	__divulong
      0000FD 5B 08            [ 2]  234 	addw	sp, #8
                                    235 ;	lib/src/stm8s_i2c.c: 167: if (result < (uint16_t)0x0004)
      0000FF A3 00 04         [ 2]  236 	cpw	x, #0x0004
      000102 24 03            [ 1]  237 	jrnc	00107$
                                    238 ;	lib/src/stm8s_i2c.c: 170: result = (uint16_t)0x0004;
      000104 AE 00 04         [ 2]  239 	ldw	x, #0x0004
      000107                        240 00107$:
                                    241 ;	lib/src/stm8s_i2c.c: 176: I2C->TRISER = (uint8_t)(InputClockFrequencyMHz + (uint8_t)1);
      000107 7B 13            [ 1]  242 	ld	a, (0x13, sp)
      000109 4C               [ 1]  243 	inc	a
      00010A C7 52 1D         [ 1]  244 	ld	0x521d, a
      00010D                        245 00110$:
                                    246 ;	lib/src/stm8s_i2c.c: 181: I2C->CCRL = (uint8_t)result;
      00010D 9F               [ 1]  247 	ld	a, xl
      00010E C7 52 1B         [ 1]  248 	ld	0x521b, a
                                    249 ;	lib/src/stm8s_i2c.c: 182: I2C->CCRH = (uint8_t)((uint8_t)((uint8_t)(result >> 8) & I2C_CCRH_CCR) | tmpccrh);
      000111 9E               [ 1]  250 	ld	a, xh
      000112 A4 0F            [ 1]  251 	and	a, #0x0f
      000114 1A 05            [ 1]  252 	or	a, (0x05, sp)
      000116 C7 52 1C         [ 1]  253 	ld	0x521c, a
                                    254 ;	lib/src/stm8s_i2c.c: 185: I2C->CR1 |= I2C_CR1_PE;
      000119 72 10 52 10      [ 1]  255 	bset	0x5210, #0
                                    256 ;	lib/src/stm8s_i2c.c: 188: I2C_AcknowledgeConfig(Ack);
      00011D 7B 11            [ 1]  257 	ld	a, (0x11, sp)
      00011F CDr01rE1         [ 4]  258 	call	_I2C_AcknowledgeConfig
                                    259 ;	lib/src/stm8s_i2c.c: 201: I2C->OARL = (uint8_t)(AddMode == I2C_ADDMODE_7BIT ? (OwnAddress<<1) : OwnAddress);
      000122 0D 12            [ 1]  260 	tnz	(0x12, sp)
      000124 26 0A            [ 1]  261 	jrne	00113$
      000126 7B 0F            [ 1]  262 	ld	a, (0x0f, sp)
      000128 48               [ 1]  263 	sll	a
      000129 97               [ 1]  264 	ld	xl, a
      00012A 49               [ 1]  265 	rlc	a
      00012B 4F               [ 1]  266 	clr	a
      00012C A2 00            [ 1]  267 	sbc	a, #0x00
      00012E 95               [ 1]  268 	ld	xh, a
      00012F C5                     269 	.byte 0xc5
      000130                        270 00113$:
      000130 1E 0E            [ 2]  271 	ldw	x, (0x0e, sp)
      000132                        272 00114$:
      000132 9F               [ 1]  273 	ld	a, xl
      000133 C7 52 13         [ 1]  274 	ld	0x5213, a
                                    275 ;	lib/src/stm8s_i2c.c: 202: I2C->OARH = (uint8_t)((uint8_t)(AddMode | I2C_OARH_ADDCONF) |
      000136 7B 12            [ 1]  276 	ld	a, (0x12, sp)
      000138 AA 40            [ 1]  277 	or	a, #0x40
      00013A 6B 07            [ 1]  278 	ld	(0x07, sp), a
                                    279 ;	lib/src/stm8s_i2c.c: 203: (uint8_t)((OwnAddress & (uint16_t)0x0300) >> (uint8_t)7));
      00013C 4F               [ 1]  280 	clr	a
      00013D 97               [ 1]  281 	ld	xl, a
      00013E 7B 0E            [ 1]  282 	ld	a, (0x0e, sp)
      000140 A4 03            [ 1]  283 	and	a, #0x03
      000142 95               [ 1]  284 	ld	xh, a
      000143 A6 80            [ 1]  285 	ld	a, #0x80
      000145 62               [ 2]  286 	div	x, a
      000146 9F               [ 1]  287 	ld	a, xl
      000147 1A 07            [ 1]  288 	or	a, (0x07, sp)
      000149 C7 52 14         [ 1]  289 	ld	0x5214, a
                                    290 ;	lib/src/stm8s_i2c.c: 204: }
      00014C 1E 08            [ 2]  291 	ldw	x, (8, sp)
      00014E 5B 13            [ 2]  292 	addw	sp, #19
      000150 FC               [ 2]  293 	jp	(x)
                                    294 ;	lib/src/stm8s_i2c.c: 212: void I2C_Cmd(FunctionalState NewState)
                                    295 ;	-----------------------------------------
                                    296 ;	 function I2C_Cmd
                                    297 ;	-----------------------------------------
      000151                        298 _I2C_Cmd:
      000151 88               [ 1]  299 	push	a
      000152 6B 01            [ 1]  300 	ld	(0x01, sp), a
                                    301 ;	lib/src/stm8s_i2c.c: 220: I2C->CR1 |= I2C_CR1_PE;
      000154 C6 52 10         [ 1]  302 	ld	a, 0x5210
                                    303 ;	lib/src/stm8s_i2c.c: 217: if (NewState != DISABLE)
      000157 0D 01            [ 1]  304 	tnz	(0x01, sp)
      000159 27 07            [ 1]  305 	jreq	00102$
                                    306 ;	lib/src/stm8s_i2c.c: 220: I2C->CR1 |= I2C_CR1_PE;
      00015B AA 01            [ 1]  307 	or	a, #0x01
      00015D C7 52 10         [ 1]  308 	ld	0x5210, a
      000160 20 05            [ 2]  309 	jra	00104$
      000162                        310 00102$:
                                    311 ;	lib/src/stm8s_i2c.c: 225: I2C->CR1 &= (uint8_t)(~I2C_CR1_PE);
      000162 A4 FE            [ 1]  312 	and	a, #0xfe
      000164 C7 52 10         [ 1]  313 	ld	0x5210, a
      000167                        314 00104$:
                                    315 ;	lib/src/stm8s_i2c.c: 227: }
      000167 84               [ 1]  316 	pop	a
      000168 81               [ 4]  317 	ret
                                    318 ;	lib/src/stm8s_i2c.c: 235: void I2C_GeneralCallCmd(FunctionalState NewState)
                                    319 ;	-----------------------------------------
                                    320 ;	 function I2C_GeneralCallCmd
                                    321 ;	-----------------------------------------
      000169                        322 _I2C_GeneralCallCmd:
      000169 88               [ 1]  323 	push	a
      00016A 6B 01            [ 1]  324 	ld	(0x01, sp), a
                                    325 ;	lib/src/stm8s_i2c.c: 243: I2C->CR1 |= I2C_CR1_ENGC;
      00016C C6 52 10         [ 1]  326 	ld	a, 0x5210
                                    327 ;	lib/src/stm8s_i2c.c: 240: if (NewState != DISABLE)
      00016F 0D 01            [ 1]  328 	tnz	(0x01, sp)
      000171 27 07            [ 1]  329 	jreq	00102$
                                    330 ;	lib/src/stm8s_i2c.c: 243: I2C->CR1 |= I2C_CR1_ENGC;
      000173 AA 40            [ 1]  331 	or	a, #0x40
      000175 C7 52 10         [ 1]  332 	ld	0x5210, a
      000178 20 05            [ 2]  333 	jra	00104$
      00017A                        334 00102$:
                                    335 ;	lib/src/stm8s_i2c.c: 248: I2C->CR1 &= (uint8_t)(~I2C_CR1_ENGC);
      00017A A4 BF            [ 1]  336 	and	a, #0xbf
      00017C C7 52 10         [ 1]  337 	ld	0x5210, a
      00017F                        338 00104$:
                                    339 ;	lib/src/stm8s_i2c.c: 250: }
      00017F 84               [ 1]  340 	pop	a
      000180 81               [ 4]  341 	ret
                                    342 ;	lib/src/stm8s_i2c.c: 260: void I2C_GenerateSTART(FunctionalState NewState)
                                    343 ;	-----------------------------------------
                                    344 ;	 function I2C_GenerateSTART
                                    345 ;	-----------------------------------------
      000181                        346 _I2C_GenerateSTART:
      000181 88               [ 1]  347 	push	a
      000182 6B 01            [ 1]  348 	ld	(0x01, sp), a
                                    349 ;	lib/src/stm8s_i2c.c: 268: I2C->CR2 |= I2C_CR2_START;
      000184 C6 52 11         [ 1]  350 	ld	a, 0x5211
                                    351 ;	lib/src/stm8s_i2c.c: 265: if (NewState != DISABLE)
      000187 0D 01            [ 1]  352 	tnz	(0x01, sp)
      000189 27 07            [ 1]  353 	jreq	00102$
                                    354 ;	lib/src/stm8s_i2c.c: 268: I2C->CR2 |= I2C_CR2_START;
      00018B AA 01            [ 1]  355 	or	a, #0x01
      00018D C7 52 11         [ 1]  356 	ld	0x5211, a
      000190 20 05            [ 2]  357 	jra	00104$
      000192                        358 00102$:
                                    359 ;	lib/src/stm8s_i2c.c: 273: I2C->CR2 &= (uint8_t)(~I2C_CR2_START);
      000192 A4 FE            [ 1]  360 	and	a, #0xfe
      000194 C7 52 11         [ 1]  361 	ld	0x5211, a
      000197                        362 00104$:
                                    363 ;	lib/src/stm8s_i2c.c: 275: }
      000197 84               [ 1]  364 	pop	a
      000198 81               [ 4]  365 	ret
                                    366 ;	lib/src/stm8s_i2c.c: 283: void I2C_GenerateSTOP(FunctionalState NewState)
                                    367 ;	-----------------------------------------
                                    368 ;	 function I2C_GenerateSTOP
                                    369 ;	-----------------------------------------
      000199                        370 _I2C_GenerateSTOP:
      000199 88               [ 1]  371 	push	a
      00019A 6B 01            [ 1]  372 	ld	(0x01, sp), a
                                    373 ;	lib/src/stm8s_i2c.c: 291: I2C->CR2 |= I2C_CR2_STOP;
      00019C C6 52 11         [ 1]  374 	ld	a, 0x5211
                                    375 ;	lib/src/stm8s_i2c.c: 288: if (NewState != DISABLE)
      00019F 0D 01            [ 1]  376 	tnz	(0x01, sp)
      0001A1 27 07            [ 1]  377 	jreq	00102$
                                    378 ;	lib/src/stm8s_i2c.c: 291: I2C->CR2 |= I2C_CR2_STOP;
      0001A3 AA 02            [ 1]  379 	or	a, #0x02
      0001A5 C7 52 11         [ 1]  380 	ld	0x5211, a
      0001A8 20 05            [ 2]  381 	jra	00104$
      0001AA                        382 00102$:
                                    383 ;	lib/src/stm8s_i2c.c: 296: I2C->CR2 &= (uint8_t)(~I2C_CR2_STOP);
      0001AA A4 FD            [ 1]  384 	and	a, #0xfd
      0001AC C7 52 11         [ 1]  385 	ld	0x5211, a
      0001AF                        386 00104$:
                                    387 ;	lib/src/stm8s_i2c.c: 298: }
      0001AF 84               [ 1]  388 	pop	a
      0001B0 81               [ 4]  389 	ret
                                    390 ;	lib/src/stm8s_i2c.c: 306: void I2C_SoftwareResetCmd(FunctionalState NewState)
                                    391 ;	-----------------------------------------
                                    392 ;	 function I2C_SoftwareResetCmd
                                    393 ;	-----------------------------------------
      0001B1                        394 _I2C_SoftwareResetCmd:
      0001B1 88               [ 1]  395 	push	a
      0001B2 6B 01            [ 1]  396 	ld	(0x01, sp), a
                                    397 ;	lib/src/stm8s_i2c.c: 314: I2C->CR2 |= I2C_CR2_SWRST;
      0001B4 C6 52 11         [ 1]  398 	ld	a, 0x5211
                                    399 ;	lib/src/stm8s_i2c.c: 311: if (NewState != DISABLE)
      0001B7 0D 01            [ 1]  400 	tnz	(0x01, sp)
      0001B9 27 07            [ 1]  401 	jreq	00102$
                                    402 ;	lib/src/stm8s_i2c.c: 314: I2C->CR2 |= I2C_CR2_SWRST;
      0001BB AA 80            [ 1]  403 	or	a, #0x80
      0001BD C7 52 11         [ 1]  404 	ld	0x5211, a
      0001C0 20 05            [ 2]  405 	jra	00104$
      0001C2                        406 00102$:
                                    407 ;	lib/src/stm8s_i2c.c: 319: I2C->CR2 &= (uint8_t)(~I2C_CR2_SWRST);
      0001C2 A4 7F            [ 1]  408 	and	a, #0x7f
      0001C4 C7 52 11         [ 1]  409 	ld	0x5211, a
      0001C7                        410 00104$:
                                    411 ;	lib/src/stm8s_i2c.c: 321: }
      0001C7 84               [ 1]  412 	pop	a
      0001C8 81               [ 4]  413 	ret
                                    414 ;	lib/src/stm8s_i2c.c: 330: void I2C_StretchClockCmd(FunctionalState NewState)
                                    415 ;	-----------------------------------------
                                    416 ;	 function I2C_StretchClockCmd
                                    417 ;	-----------------------------------------
      0001C9                        418 _I2C_StretchClockCmd:
      0001C9 88               [ 1]  419 	push	a
      0001CA 6B 01            [ 1]  420 	ld	(0x01, sp), a
                                    421 ;	lib/src/stm8s_i2c.c: 338: I2C->CR1 &= (uint8_t)(~I2C_CR1_NOSTRETCH);
      0001CC C6 52 10         [ 1]  422 	ld	a, 0x5210
                                    423 ;	lib/src/stm8s_i2c.c: 335: if (NewState != DISABLE)
      0001CF 0D 01            [ 1]  424 	tnz	(0x01, sp)
      0001D1 27 07            [ 1]  425 	jreq	00102$
                                    426 ;	lib/src/stm8s_i2c.c: 338: I2C->CR1 &= (uint8_t)(~I2C_CR1_NOSTRETCH);
      0001D3 A4 7F            [ 1]  427 	and	a, #0x7f
      0001D5 C7 52 10         [ 1]  428 	ld	0x5210, a
      0001D8 20 05            [ 2]  429 	jra	00104$
      0001DA                        430 00102$:
                                    431 ;	lib/src/stm8s_i2c.c: 344: I2C->CR1 |= I2C_CR1_NOSTRETCH;
      0001DA AA 80            [ 1]  432 	or	a, #0x80
      0001DC C7 52 10         [ 1]  433 	ld	0x5210, a
      0001DF                        434 00104$:
                                    435 ;	lib/src/stm8s_i2c.c: 346: }
      0001DF 84               [ 1]  436 	pop	a
      0001E0 81               [ 4]  437 	ret
                                    438 ;	lib/src/stm8s_i2c.c: 355: void I2C_AcknowledgeConfig(I2C_Ack_TypeDef Ack)
                                    439 ;	-----------------------------------------
                                    440 ;	 function I2C_AcknowledgeConfig
                                    441 ;	-----------------------------------------
      0001E1                        442 _I2C_AcknowledgeConfig:
      0001E1 97               [ 1]  443 	ld	xl, a
                                    444 ;	lib/src/stm8s_i2c.c: 363: I2C->CR2 &= (uint8_t)(~I2C_CR2_ACK);
      0001E2 C6 52 11         [ 1]  445 	ld	a, 0x5211
                                    446 ;	lib/src/stm8s_i2c.c: 360: if (Ack == I2C_ACK_NONE)
      0001E5 41               [ 1]  447 	exg	a, xl
      0001E6 4D               [ 1]  448 	tnz	a
      0001E7 41               [ 1]  449 	exg	a, xl
      0001E8 26 06            [ 1]  450 	jrne	00105$
                                    451 ;	lib/src/stm8s_i2c.c: 363: I2C->CR2 &= (uint8_t)(~I2C_CR2_ACK);
      0001EA A4 FB            [ 1]  452 	and	a, #0xfb
      0001EC C7 52 11         [ 1]  453 	ld	0x5211, a
      0001EF 81               [ 4]  454 	ret
      0001F0                        455 00105$:
                                    456 ;	lib/src/stm8s_i2c.c: 368: I2C->CR2 |= I2C_CR2_ACK;
      0001F0 AA 04            [ 1]  457 	or	a, #0x04
      0001F2 C7 52 11         [ 1]  458 	ld	0x5211, a
                                    459 ;	lib/src/stm8s_i2c.c: 363: I2C->CR2 &= (uint8_t)(~I2C_CR2_ACK);
      0001F5 C6 52 11         [ 1]  460 	ld	a, 0x5211
                                    461 ;	lib/src/stm8s_i2c.c: 370: if (Ack == I2C_ACK_CURR)
      0001F8 88               [ 1]  462 	push	a
      0001F9 9F               [ 1]  463 	ld	a, xl
      0001FA 4A               [ 1]  464 	dec	a
      0001FB 84               [ 1]  465 	pop	a
      0001FC 26 06            [ 1]  466 	jrne	00102$
                                    467 ;	lib/src/stm8s_i2c.c: 373: I2C->CR2 &= (uint8_t)(~I2C_CR2_POS);
      0001FE A4 F7            [ 1]  468 	and	a, #0xf7
      000200 C7 52 11         [ 1]  469 	ld	0x5211, a
      000203 81               [ 4]  470 	ret
      000204                        471 00102$:
                                    472 ;	lib/src/stm8s_i2c.c: 378: I2C->CR2 |= I2C_CR2_POS;
      000204 AA 08            [ 1]  473 	or	a, #0x08
      000206 C7 52 11         [ 1]  474 	ld	0x5211, a
                                    475 ;	lib/src/stm8s_i2c.c: 381: }
      000209 81               [ 4]  476 	ret
                                    477 ;	lib/src/stm8s_i2c.c: 391: void I2C_ITConfig(I2C_IT_TypeDef I2C_IT, FunctionalState NewState)
                                    478 ;	-----------------------------------------
                                    479 ;	 function I2C_ITConfig
                                    480 ;	-----------------------------------------
      00020A                        481 _I2C_ITConfig:
      00020A 88               [ 1]  482 	push	a
                                    483 ;	lib/src/stm8s_i2c.c: 400: I2C->ITR |= (uint8_t)I2C_IT;
      00020B AE 52 1A         [ 2]  484 	ldw	x, #0x521a
      00020E 88               [ 1]  485 	push	a
      00020F F6               [ 1]  486 	ld	a, (x)
      000210 6B 02            [ 1]  487 	ld	(0x02, sp), a
      000212 84               [ 1]  488 	pop	a
                                    489 ;	lib/src/stm8s_i2c.c: 397: if (NewState != DISABLE)
      000213 0D 04            [ 1]  490 	tnz	(0x04, sp)
      000215 27 07            [ 1]  491 	jreq	00102$
                                    492 ;	lib/src/stm8s_i2c.c: 400: I2C->ITR |= (uint8_t)I2C_IT;
      000217 1A 01            [ 1]  493 	or	a, (0x01, sp)
      000219 C7 52 1A         [ 1]  494 	ld	0x521a, a
      00021C 20 06            [ 2]  495 	jra	00104$
      00021E                        496 00102$:
                                    497 ;	lib/src/stm8s_i2c.c: 405: I2C->ITR &= (uint8_t)(~(uint8_t)I2C_IT);
      00021E 43               [ 1]  498 	cpl	a
      00021F 14 01            [ 1]  499 	and	a, (0x01, sp)
      000221 C7 52 1A         [ 1]  500 	ld	0x521a, a
      000224                        501 00104$:
                                    502 ;	lib/src/stm8s_i2c.c: 407: }
      000224 84               [ 1]  503 	pop	a
      000225 85               [ 2]  504 	popw	x
      000226 84               [ 1]  505 	pop	a
      000227 FC               [ 2]  506 	jp	(x)
                                    507 ;	lib/src/stm8s_i2c.c: 415: void I2C_FastModeDutyCycleConfig(I2C_DutyCycle_TypeDef I2C_DutyCycle)
                                    508 ;	-----------------------------------------
                                    509 ;	 function I2C_FastModeDutyCycleConfig
                                    510 ;	-----------------------------------------
      000228                        511 _I2C_FastModeDutyCycleConfig:
      000228 97               [ 1]  512 	ld	xl, a
                                    513 ;	lib/src/stm8s_i2c.c: 423: I2C->CCRH |= I2C_CCRH_DUTY;
      000229 C6 52 1C         [ 1]  514 	ld	a, 0x521c
                                    515 ;	lib/src/stm8s_i2c.c: 420: if (I2C_DutyCycle == I2C_DUTYCYCLE_16_9)
      00022C 88               [ 1]  516 	push	a
      00022D 9F               [ 1]  517 	ld	a, xl
      00022E A1 40            [ 1]  518 	cp	a, #0x40
      000230 84               [ 1]  519 	pop	a
      000231 26 06            [ 1]  520 	jrne	00102$
                                    521 ;	lib/src/stm8s_i2c.c: 423: I2C->CCRH |= I2C_CCRH_DUTY;
      000233 AA 40            [ 1]  522 	or	a, #0x40
      000235 C7 52 1C         [ 1]  523 	ld	0x521c, a
      000238 81               [ 4]  524 	ret
      000239                        525 00102$:
                                    526 ;	lib/src/stm8s_i2c.c: 428: I2C->CCRH &= (uint8_t)(~I2C_CCRH_DUTY);
      000239 A4 BF            [ 1]  527 	and	a, #0xbf
      00023B C7 52 1C         [ 1]  528 	ld	0x521c, a
                                    529 ;	lib/src/stm8s_i2c.c: 430: }
      00023E 81               [ 4]  530 	ret
                                    531 ;	lib/src/stm8s_i2c.c: 437: uint8_t I2C_ReceiveData(void)
                                    532 ;	-----------------------------------------
                                    533 ;	 function I2C_ReceiveData
                                    534 ;	-----------------------------------------
      00023F                        535 _I2C_ReceiveData:
                                    536 ;	lib/src/stm8s_i2c.c: 440: return ((uint8_t)I2C->DR);
      00023F C6 52 16         [ 1]  537 	ld	a, 0x5216
                                    538 ;	lib/src/stm8s_i2c.c: 441: }
      000242 81               [ 4]  539 	ret
                                    540 ;	lib/src/stm8s_i2c.c: 450: void I2C_Send7bitAddress(uint8_t Address, I2C_Direction_TypeDef Direction)
                                    541 ;	-----------------------------------------
                                    542 ;	 function I2C_Send7bitAddress
                                    543 ;	-----------------------------------------
      000243                        544 _I2C_Send7bitAddress:
      000243 88               [ 1]  545 	push	a
                                    546 ;	lib/src/stm8s_i2c.c: 457: Address &= (uint8_t)0xFE;
      000244 A4 FE            [ 1]  547 	and	a, #0xfe
      000246 6B 01            [ 1]  548 	ld	(0x01, sp), a
                                    549 ;	lib/src/stm8s_i2c.c: 460: I2C->DR = (uint8_t)(Address | (uint8_t)Direction);
      000248 7B 04            [ 1]  550 	ld	a, (0x04, sp)
      00024A 1A 01            [ 1]  551 	or	a, (0x01, sp)
      00024C C7 52 16         [ 1]  552 	ld	0x5216, a
                                    553 ;	lib/src/stm8s_i2c.c: 461: }
      00024F 84               [ 1]  554 	pop	a
      000250 85               [ 2]  555 	popw	x
      000251 84               [ 1]  556 	pop	a
      000252 FC               [ 2]  557 	jp	(x)
                                    558 ;	lib/src/stm8s_i2c.c: 468: void I2C_SendData(uint8_t Data)
                                    559 ;	-----------------------------------------
                                    560 ;	 function I2C_SendData
                                    561 ;	-----------------------------------------
      000253                        562 _I2C_SendData:
                                    563 ;	lib/src/stm8s_i2c.c: 471: I2C->DR = Data;
      000253 C7 52 16         [ 1]  564 	ld	0x5216, a
                                    565 ;	lib/src/stm8s_i2c.c: 472: }
      000256 81               [ 4]  566 	ret
                                    567 ;	lib/src/stm8s_i2c.c: 588: ErrorStatus I2C_CheckEvent(I2C_Event_TypeDef I2C_Event)
                                    568 ;	-----------------------------------------
                                    569 ;	 function I2C_CheckEvent
                                    570 ;	-----------------------------------------
      000257                        571 _I2C_CheckEvent:
      000257 52 08            [ 2]  572 	sub	sp, #8
                                    573 ;	lib/src/stm8s_i2c.c: 590: __IO uint16_t lastevent = 0x00;
      000259 0F 02            [ 1]  574 	clr	(0x02, sp)
      00025B 0F 01            [ 1]  575 	clr	(0x01, sp)
                                    576 ;	lib/src/stm8s_i2c.c: 598: if (I2C_Event == I2C_EVENT_SLAVE_ACK_FAILURE)
      00025D 1F 03            [ 2]  577 	ldw	(0x03, sp), x
      00025F A3 00 04         [ 2]  578 	cpw	x, #0x0004
      000262 26 0B            [ 1]  579 	jrne	00102$
                                    580 ;	lib/src/stm8s_i2c.c: 600: lastevent = I2C->SR2 & I2C_SR2_AF;
      000264 C6 52 18         [ 1]  581 	ld	a, 0x5218
      000267 A4 04            [ 1]  582 	and	a, #0x04
      000269 5F               [ 1]  583 	clrw	x
      00026A 97               [ 1]  584 	ld	xl, a
      00026B 1F 01            [ 2]  585 	ldw	(0x01, sp), x
      00026D 20 15            [ 2]  586 	jra	00103$
      00026F                        587 00102$:
                                    588 ;	lib/src/stm8s_i2c.c: 604: flag1 = I2C->SR1;
      00026F C6 52 17         [ 1]  589 	ld	a, 0x5217
      000272 97               [ 1]  590 	ld	xl, a
                                    591 ;	lib/src/stm8s_i2c.c: 605: flag2 = I2C->SR3;
      000273 C6 52 19         [ 1]  592 	ld	a, 0x5219
                                    593 ;	lib/src/stm8s_i2c.c: 606: lastevent = ((uint16_t)((uint16_t)flag2 << (uint16_t)8) | (uint16_t)flag1);
      000276 95               [ 1]  594 	ld	xh, a
      000277 0F 06            [ 1]  595 	clr	(0x06, sp)
      000279 9F               [ 1]  596 	ld	a, xl
      00027A 0F 07            [ 1]  597 	clr	(0x07, sp)
      00027C 1A 06            [ 1]  598 	or	a, (0x06, sp)
      00027E 02               [ 1]  599 	rlwa	x
      00027F 1A 07            [ 1]  600 	or	a, (0x07, sp)
      000281 95               [ 1]  601 	ld	xh, a
      000282 1F 01            [ 2]  602 	ldw	(0x01, sp), x
      000284                        603 00103$:
                                    604 ;	lib/src/stm8s_i2c.c: 609: if (((uint16_t)lastevent & (uint16_t)I2C_Event) == (uint16_t)I2C_Event)
      000284 7B 02            [ 1]  605 	ld	a, (0x02, sp)
      000286 14 04            [ 1]  606 	and	a, (0x04, sp)
      000288 97               [ 1]  607 	ld	xl, a
      000289 7B 01            [ 1]  608 	ld	a, (0x01, sp)
      00028B 14 03            [ 1]  609 	and	a, (0x03, sp)
      00028D 95               [ 1]  610 	ld	xh, a
      00028E 13 03            [ 2]  611 	cpw	x, (0x03, sp)
      000290 26 03            [ 1]  612 	jrne	00105$
                                    613 ;	lib/src/stm8s_i2c.c: 612: status = SUCCESS;
      000292 A6 01            [ 1]  614 	ld	a, #0x01
                                    615 ;	lib/src/stm8s_i2c.c: 617: status = ERROR;
      000294 21                     616 	.byte 0x21
      000295                        617 00105$:
      000295 4F               [ 1]  618 	clr	a
      000296                        619 00106$:
                                    620 ;	lib/src/stm8s_i2c.c: 621: return status;
                                    621 ;	lib/src/stm8s_i2c.c: 622: }
      000296 5B 08            [ 2]  622 	addw	sp, #8
      000298 81               [ 4]  623 	ret
                                    624 ;	lib/src/stm8s_i2c.c: 638: I2C_Event_TypeDef I2C_GetLastEvent(void)
                                    625 ;	-----------------------------------------
                                    626 ;	 function I2C_GetLastEvent
                                    627 ;	-----------------------------------------
      000299                        628 _I2C_GetLastEvent:
      000299 52 04            [ 2]  629 	sub	sp, #4
                                    630 ;	lib/src/stm8s_i2c.c: 640: __IO uint16_t lastevent = 0;
      00029B 5F               [ 1]  631 	clrw	x
      00029C 1F 01            [ 2]  632 	ldw	(0x01, sp), x
                                    633 ;	lib/src/stm8s_i2c.c: 644: if ((I2C->SR2 & I2C_SR2_AF) != 0x00)
      00029E 72 05 52 18 07   [ 2]  634 	btjf	0x5218, #2, 00102$
                                    635 ;	lib/src/stm8s_i2c.c: 646: lastevent = I2C_EVENT_SLAVE_ACK_FAILURE;
      0002A3 AE 00 04         [ 2]  636 	ldw	x, #0x0004
      0002A6 1F 01            [ 2]  637 	ldw	(0x01, sp), x
      0002A8 20 13            [ 2]  638 	jra	00103$
      0002AA                        639 00102$:
                                    640 ;	lib/src/stm8s_i2c.c: 651: flag1 = I2C->SR1;
      0002AA C6 52 17         [ 1]  641 	ld	a, 0x5217
      0002AD 6B 04            [ 1]  642 	ld	(0x04, sp), a
      0002AF 0F 03            [ 1]  643 	clr	(0x03, sp)
                                    644 ;	lib/src/stm8s_i2c.c: 652: flag2 = I2C->SR3;
      0002B1 C6 52 19         [ 1]  645 	ld	a, 0x5219
                                    646 ;	lib/src/stm8s_i2c.c: 655: lastevent = ((uint16_t)((uint16_t)flag2 << 8) | (uint16_t)flag1);
      0002B4 95               [ 1]  647 	ld	xh, a
      0002B5 7B 04            [ 1]  648 	ld	a, (0x04, sp)
      0002B7 02               [ 1]  649 	rlwa	x
      0002B8 1A 03            [ 1]  650 	or	a, (0x03, sp)
      0002BA 95               [ 1]  651 	ld	xh, a
      0002BB 1F 01            [ 2]  652 	ldw	(0x01, sp), x
      0002BD                        653 00103$:
                                    654 ;	lib/src/stm8s_i2c.c: 658: return (I2C_Event_TypeDef)lastevent;
      0002BD 1E 01            [ 2]  655 	ldw	x, (0x01, sp)
                                    656 ;	lib/src/stm8s_i2c.c: 659: }
      0002BF 5B 04            [ 2]  657 	addw	sp, #4
      0002C1 81               [ 4]  658 	ret
                                    659 ;	lib/src/stm8s_i2c.c: 689: FlagStatus I2C_GetFlagStatus(I2C_Flag_TypeDef I2C_Flag)
                                    660 ;	-----------------------------------------
                                    661 ;	 function I2C_GetFlagStatus
                                    662 ;	-----------------------------------------
      0002C2                        663 _I2C_GetFlagStatus:
      0002C2 88               [ 1]  664 	push	a
                                    665 ;	lib/src/stm8s_i2c.c: 691: uint8_t tempreg = 0;
      0002C3 0F 01            [ 1]  666 	clr	(0x01, sp)
                                    667 ;	lib/src/stm8s_i2c.c: 699: regindex = (uint8_t)((uint16_t)I2C_Flag >> 8);
      0002C5 9E               [ 1]  668 	ld	a, xh
                                    669 ;	lib/src/stm8s_i2c.c: 701: switch (regindex)
      0002C6 A1 01            [ 1]  670 	cp	a, #0x01
      0002C8 27 0A            [ 1]  671 	jreq	00101$
      0002CA A1 02            [ 1]  672 	cp	a, #0x02
      0002CC 27 0D            [ 1]  673 	jreq	00102$
      0002CE A1 03            [ 1]  674 	cp	a, #0x03
      0002D0 27 10            [ 1]  675 	jreq	00103$
      0002D2 20 13            [ 2]  676 	jra	00105$
                                    677 ;	lib/src/stm8s_i2c.c: 704: case 0x01:
      0002D4                        678 00101$:
                                    679 ;	lib/src/stm8s_i2c.c: 705: tempreg = (uint8_t)I2C->SR1;
      0002D4 C6 52 17         [ 1]  680 	ld	a, 0x5217
      0002D7 6B 01            [ 1]  681 	ld	(0x01, sp), a
                                    682 ;	lib/src/stm8s_i2c.c: 706: break;
      0002D9 20 0C            [ 2]  683 	jra	00105$
                                    684 ;	lib/src/stm8s_i2c.c: 709: case 0x02:
      0002DB                        685 00102$:
                                    686 ;	lib/src/stm8s_i2c.c: 710: tempreg = (uint8_t)I2C->SR2;
      0002DB C6 52 18         [ 1]  687 	ld	a, 0x5218
      0002DE 6B 01            [ 1]  688 	ld	(0x01, sp), a
                                    689 ;	lib/src/stm8s_i2c.c: 711: break;
      0002E0 20 05            [ 2]  690 	jra	00105$
                                    691 ;	lib/src/stm8s_i2c.c: 714: case 0x03:
      0002E2                        692 00103$:
                                    693 ;	lib/src/stm8s_i2c.c: 715: tempreg = (uint8_t)I2C->SR3;
      0002E2 C6 52 19         [ 1]  694 	ld	a, 0x5219
      0002E5 6B 01            [ 1]  695 	ld	(0x01, sp), a
                                    696 ;	lib/src/stm8s_i2c.c: 720: }
      0002E7                        697 00105$:
                                    698 ;	lib/src/stm8s_i2c.c: 723: if ((tempreg & (uint8_t)I2C_Flag ) != 0)
      0002E7 9F               [ 1]  699 	ld	a, xl
      0002E8 14 01            [ 1]  700 	and	a, (0x01, sp)
      0002EA 27 03            [ 1]  701 	jreq	00107$
                                    702 ;	lib/src/stm8s_i2c.c: 726: bitstatus = SET;
      0002EC A6 01            [ 1]  703 	ld	a, #0x01
                                    704 ;	lib/src/stm8s_i2c.c: 731: bitstatus = RESET;
      0002EE 21                     705 	.byte 0x21
      0002EF                        706 00107$:
      0002EF 4F               [ 1]  707 	clr	a
      0002F0                        708 00108$:
                                    709 ;	lib/src/stm8s_i2c.c: 734: return bitstatus;
                                    710 ;	lib/src/stm8s_i2c.c: 735: }
      0002F0 5B 01            [ 2]  711 	addw	sp, #1
      0002F2 81               [ 4]  712 	ret
                                    713 ;	lib/src/stm8s_i2c.c: 769: void I2C_ClearFlag(I2C_Flag_TypeDef I2C_FLAG)
                                    714 ;	-----------------------------------------
                                    715 ;	 function I2C_ClearFlag
                                    716 ;	-----------------------------------------
      0002F3                        717 _I2C_ClearFlag:
                                    718 ;	lib/src/stm8s_i2c.c: 776: flagpos = (uint16_t)I2C_FLAG & FLAG_Mask;
      0002F3 4F               [ 1]  719 	clr	a
      0002F4 95               [ 1]  720 	ld	xh, a
                                    721 ;	lib/src/stm8s_i2c.c: 778: I2C->SR2 = (uint8_t)((uint16_t)(~flagpos));
      0002F5 53               [ 2]  722 	cplw	x
      0002F6 9F               [ 1]  723 	ld	a, xl
      0002F7 C7 52 18         [ 1]  724 	ld	0x5218, a
                                    725 ;	lib/src/stm8s_i2c.c: 779: }
      0002FA 81               [ 4]  726 	ret
                                    727 ;	lib/src/stm8s_i2c.c: 801: ITStatus I2C_GetITStatus(I2C_ITPendingBit_TypeDef I2C_ITPendingBit)
                                    728 ;	-----------------------------------------
                                    729 ;	 function I2C_GetITStatus
                                    730 ;	-----------------------------------------
      0002FB                        731 _I2C_GetITStatus:
      0002FB 52 04            [ 2]  732 	sub	sp, #4
      0002FD 51               [ 1]  733 	exgw	x, y
                                    734 ;	lib/src/stm8s_i2c.c: 804: __IO uint8_t enablestatus = 0;
      0002FE 0F 03            [ 1]  735 	clr	(0x03, sp)
                                    736 ;	lib/src/stm8s_i2c.c: 810: tempregister = (uint8_t)( ((uint16_t)((uint16_t)I2C_ITPendingBit & ITEN_Mask)) >> 8);
      000300 93               [ 1]  737 	ldw	x, y
      000301 0F 02            [ 1]  738 	clr	(0x02, sp)
      000303 9E               [ 1]  739 	ld	a, xh
      000304 A4 07            [ 1]  740 	and	a, #0x07
      000306 6B 04            [ 1]  741 	ld	(0x04, sp), a
                                    742 ;	lib/src/stm8s_i2c.c: 813: enablestatus = (uint8_t)(I2C->ITR & ( uint8_t)tempregister);
      000308 C6 52 1A         [ 1]  743 	ld	a, 0x521a
      00030B 14 04            [ 1]  744 	and	a, (0x04, sp)
      00030D 6B 03            [ 1]  745 	ld	(0x03, sp), a
                                    746 ;	lib/src/stm8s_i2c.c: 815: if ((uint16_t)((uint16_t)I2C_ITPendingBit & REGISTER_Mask) == REGISTER_SR1_Index)
      00030F 4F               [ 1]  747 	clr	a
      000310 02               [ 1]  748 	rlwa	x
      000311 A4 30            [ 1]  749 	and	a, #0x30
                                    750 ;	lib/src/stm8s_i2c.c: 818: if (((I2C->SR1 & (uint8_t)I2C_ITPendingBit) != RESET) && enablestatus)
      000313 61               [ 1]  751 	exg	a, yl
      000314 6B 04            [ 1]  752 	ld	(0x04, sp), a
      000316 61               [ 1]  753 	exg	a, yl
                                    754 ;	lib/src/stm8s_i2c.c: 815: if ((uint16_t)((uint16_t)I2C_ITPendingBit & REGISTER_Mask) == REGISTER_SR1_Index)
      000317 95               [ 1]  755 	ld	xh, a
      000318 A3 01 00         [ 2]  756 	cpw	x, #0x0100
      00031B 26 12            [ 1]  757 	jrne	00110$
                                    758 ;	lib/src/stm8s_i2c.c: 818: if (((I2C->SR1 & (uint8_t)I2C_ITPendingBit) != RESET) && enablestatus)
      00031D C6 52 17         [ 1]  759 	ld	a, 0x5217
      000320 14 04            [ 1]  760 	and	a, (0x04, sp)
      000322 27 08            [ 1]  761 	jreq	00102$
      000324 0D 03            [ 1]  762 	tnz	(0x03, sp)
      000326 27 04            [ 1]  763 	jreq	00102$
                                    764 ;	lib/src/stm8s_i2c.c: 821: bitstatus = SET;
      000328 A6 01            [ 1]  765 	ld	a, #0x01
      00032A 20 12            [ 2]  766 	jra	00111$
      00032C                        767 00102$:
                                    768 ;	lib/src/stm8s_i2c.c: 826: bitstatus = RESET;
      00032C 4F               [ 1]  769 	clr	a
      00032D 20 0F            [ 2]  770 	jra	00111$
      00032F                        771 00110$:
                                    772 ;	lib/src/stm8s_i2c.c: 832: if (((I2C->SR2 & (uint8_t)I2C_ITPendingBit) != RESET) && enablestatus)
      00032F C6 52 18         [ 1]  773 	ld	a, 0x5218
      000332 14 04            [ 1]  774 	and	a, (0x04, sp)
      000334 27 07            [ 1]  775 	jreq	00106$
      000336 0D 03            [ 1]  776 	tnz	(0x03, sp)
      000338 27 03            [ 1]  777 	jreq	00106$
                                    778 ;	lib/src/stm8s_i2c.c: 835: bitstatus = SET;
      00033A A6 01            [ 1]  779 	ld	a, #0x01
                                    780 ;	lib/src/stm8s_i2c.c: 840: bitstatus = RESET;
      00033C 21                     781 	.byte 0x21
      00033D                        782 00106$:
      00033D 4F               [ 1]  783 	clr	a
      00033E                        784 00111$:
                                    785 ;	lib/src/stm8s_i2c.c: 844: return  bitstatus;
                                    786 ;	lib/src/stm8s_i2c.c: 845: }
      00033E 5B 04            [ 2]  787 	addw	sp, #4
      000340 81               [ 4]  788 	ret
                                    789 ;	lib/src/stm8s_i2c.c: 881: void I2C_ClearITPendingBit(I2C_ITPendingBit_TypeDef I2C_ITPendingBit)
                                    790 ;	-----------------------------------------
                                    791 ;	 function I2C_ClearITPendingBit
                                    792 ;	-----------------------------------------
      000341                        793 _I2C_ClearITPendingBit:
                                    794 ;	lib/src/stm8s_i2c.c: 889: flagpos = (uint16_t)I2C_ITPendingBit & FLAG_Mask;
      000341 4F               [ 1]  795 	clr	a
      000342 95               [ 1]  796 	ld	xh, a
                                    797 ;	lib/src/stm8s_i2c.c: 892: I2C->SR2 = (uint8_t)((uint16_t)~flagpos);
      000343 53               [ 2]  798 	cplw	x
      000344 9F               [ 1]  799 	ld	a, xl
      000345 C7 52 18         [ 1]  800 	ld	0x5218, a
                                    801 ;	lib/src/stm8s_i2c.c: 893: }
      000348 81               [ 4]  802 	ret
                                    803 	.area CODE
                                    804 	.area CONST
                                    805 	.area INITIALIZER
                                    806 	.area CABS (ABS)
